VERBATIM#include<stdlib.h>#include<stdio.h>#include<math.h>ENDVERBATIMNEURON{SUFFIXnothing}VERBATIM#ifndefNRN_VERSION_GTEQ_8_2_0#include<stdint.h>externuint32_tnrnRan4int(uint32_t*idx1,uint32_tidx2);externdouble*vector_vec();externintvector_capacity();externvoid*vector_arg();#endifENDVERBATIMVERBATIMstaticdoubleget_x_pos(intgid,intgmin,intBinNumX,intBinNumYZ,intbinSizeX){doublepos;intCellNum,tmp;CellNum=gid-gmin+1;tmp=floor((CellNum-1)/BinNumYZ);pos=(tmp%BinNumX)*binSizeX+binSizeX/2.0;returnpos;}staticdoubleget_y_pos(intgid,intgmin,intBinNumY,intBinNumZ,intbinSizeY){doublepos;intCellNum,tmp;CellNum=gid-gmin+1;tmp=floor((CellNum-1)/BinNumZ);pos=(tmp%BinNumY)*binSizeY+binSizeY/2.0;returnpos;}staticdoubleget_z_pos(intgid,intgmin,intBinNumZ,intbinSizeZ,intZHeight){doublepos;intCellNum;CellNum=gid-gmin+1;pos=((CellNum-1)%BinNumZ)*binSizeZ+binSizeZ/2+ZHeight;returnpos;}staticdoublerepeatconn(void*vv){intrepeatfinal,ny,nz,num_pre,num_post,gmin,gmax,maxd,steps,myflaggy,myi,postgmin,stepover;double*x,*y,*z,a,b,c,nconv,ncell;repeatfinal=vector_instance_px(vv,&x);ny=vector_arg_px(1,&y);nz=vector_arg_px(2,&z);gmin=y[0];gmax=y[1];num_pre=gmax-gmin+1;nconv=y[2];ncell=y[3];num_post=y[4];maxd=y[5];steps=y[6];a=y[7];b=y[8];c=y[9];postgmin=y[24];stepover=y[26];myi=2;doubleprepos[num_pre][3];doublepostpos[num_post][3];intcell;for(cell=0;cell<num_pre;cell++){prepos[cell][0]=get_x_pos(cell+gmin,gmin,y[10],y[11]*y[12],y[13]);prepos[cell][1]=get_y_pos(cell+gmin,gmin,y[11],y[12],y[14]);prepos[cell][2]=get_z_pos(cell+gmin,gmin,y[12],y[15],y[16]);}for(cell=0;cell<num_post;cell++){postpos[cell][0]=get_x_pos(z[cell],postgmin,y[17],y[18]*y[19],y[20]);postpos[cell][1]=get_y_pos(z[cell],postgmin,y[18],y[19],y[21]);postpos[cell][2]=get_z_pos(z[cell],postgmin,y[19],y[22],y[23]);}doublemt[steps],tu[steps],tsum,conndist,mytmp;intstep,dln[steps],fdln[steps];tsum=0.0;mytmp=0.0;intmaxi;maxi=0;for(step=0;step<steps;step++){mt[step]=maxd*1.0*(step+1)/(steps);tu[step]=(1.0/a)*exp(-((mt[step]-b)*1.0/c)*((mt[step]-b)*1.0/c))*maxd;if(tu[step]>tu[maxi]){maxi=step;}tsum=tsum+tu[step];}if(tu[maxi]/tsum*nconv<0.5){for(step=0;step<steps;step++){fdln[step]=round((2.0*tu[step]/tsum)*(nconv));}}else{for(step=0;step<steps;step++){fdln[step]=round((tu[step]/tsum)*(nconv));}}intm,n,i,q,goupto,rem,extra,szr,szp[steps];doublepl;u_int32_tidx1,idx2,maxidx1;maxidx1=y[25];for(n=0;n<num_post;n++){intmyx=(int)z[n];idx1=y[25];idx2=myx;doublesortedpos[num_pre][steps];for(step=0;step<steps;step++){szp[step]=0;dln[step]=fdln[step];}doubledist;for(m=0;m<num_pre;m++){pl=sqrt((1.0*prepos[m][0]-postpos[n][0])*(prepos[m][0]-postpos[n][0])+(prepos[m][1]-postpos[n][1])*(prepos[m][1]-postpos[n][1])+(prepos[m][2]-postpos[n][2])*(prepos[m][2]-postpos[n][2]));for(step=0;step<steps;step++){if(pl<=mt[step]){sortedpos[szp[step]][step]=m;szp[step]++;break;}}}rem=0;extra=0;for(step=0;step<steps;step++){szr=szp[step];if(szr<1){rem=dln[step]+rem-szr;if(step<steps-1){if(szp[step+1]>dln[step+1]){if(szp[step+1]-dln[step+1]>rem){extra=rem;}else{extra=szp[step+1]-dln[step+1];}dln[step+1]=dln[step+1]+extra;dln[step]=dln[step]-extra;rem=rem-extra;}}if(rem>0&&step>0){if(szp[step-1]>dln[step-1]){if(szp[step-1]-dln[step-1]>rem){extra=rem;}else{extra=szp[step-1]-dln[step-1];}dln[step-1]=dln[step-1]+extra;dln[step]=dln[step]-extra;rem=rem-extra;}}}}rem=0;for(step=0;step<steps;step++){szr=szp[step];if(dln[step]>0&&szr>0){intr[szr];introut[dln[step]];for(i=0;i<szr;i++){r[i]=sortedpos[i][step];}u_int32_trandi;for(i=0;i<dln[step];i++){randi=nrnRan4int(&idx1,idx2)%(u_int32_t)szr;rout[i]=r[randi];}for(q=0;q<dln[step];q++){x[myi]=(rout[q]+gmin)*1.0;x[myi+1*stepover]=(z[n])*1.0;x[myi+2*stepover]=(step+1)*1.0;myi++;}}}if(idx1>maxidx1){maxidx1=idx1;}}x[0]=myi-2;x[1]=(double)maxidx1;returnrepeatfinal;}ENDVERBATIMPROCEDUREinstall_repeatconn(){VERBATIMinstall_vector_method("repeatconn",repeatconn);ENDVERBATIM}