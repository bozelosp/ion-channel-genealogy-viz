NEURON{SUFFIXnothingGLOBALBVBASE,RES,VECST_INSTALLED,DEBUG_VECST,VERBOSE_VECST,INTERP_VECST,LOOSE}PARAMETER{BVBASE=0.VECST_INSTALLED=0DEBUG_VECST=0VERBOSE_VECST=1INTERP_VECST=1LOOSE=1e-6ERR=-1.3480e121GET=-1.3479e121SET=-1.3478e121OK=-1.3477e121NOP=-1.3476e121ALL=-1.3479e120NEG=-1.3478e120POS=-1.3477e120CHK=-1.3476e120NOZ=-1.3475e120GTH=-1.3474e120GTE=-1.3473e120LTH=-1.3472e120LTE=-1.3471e120EQU=-1.3470e120EQV=-1.3469e120EQW=-1.3468e120EQX=-1.3467e120EQY=-1.34665e120NEQ=-1.3466e120SEQ=-1.3465e120RXP=-1.3464e120IBE=-1.3463e120EBI=-1.3462e120IBI=-1.3461e120EBE=-1.3460e120}ASSIGNED{RES}VERBATIM#include"misc.h"ENDVERBATIMVERBATIMintcmpdfn(doublea,doubleb){return((a)<=(b))?(((a)==(b))?0:-1):1;}staticunsignedintbufsz=0;unsignedintscrsz=0;unsignedint*scr=0x0;unsignedintdcrsz=0;double*dcr=0x0;int*iscr=0x0;unsignedintiscrsz=0;int*iscrset(intnx){if(nx>iscrsz){iscrsz=nx+10000;if(iscrsz>0){iscr=(int*)realloc((void*)iscr,(size_t)iscrsz*sizeof(int));}else{iscr=(int*)ecalloc(iscrsz,sizeof(int));}}returniscr;}unsignedint*scrset(intnx){if(nx>scrsz){scrsz=nx+10000;if(scrsz>0){scr=(unsignedint*)realloc((void*)scr,(size_t)scrsz*sizeof(int));}else{scr=(unsignedint*)ecalloc(scrsz,sizeof(int));}}returnscr;}double*dcrset(intnx){if(nx>dcrsz){dcrsz=nx+10000;if(dcrsz>0){dcr=(double*)realloc((void*)dcr,(size_t)dcrsz*sizeof(double));}else{dcr=(double*)ecalloc(dcrsz,sizeof(double));}}returndcr;}ENDVERBATIMVERBATIMstaticdoubleident(void*vv){intnx,bsz;double*x;nx=vector_instance_px(vv,&x);bsz=vector_buffer_size(vv);printf("Obj*%xDbl*%xSize:%dBufsize:%d\n",(unsignedint)vv,(unsignedint)x,nx,bsz);return(double)nx;}ENDVERBATIMVERBATIMstaticdoubleindset(void*vv){inti,nx,ny,nz,flag,equ;char*op;double*x,*y,*z,val,val2,inc;nx=vector_instance_px(vv,&x);ny=vector_arg_px(1,&y);val2=flag=equ=inc=0;if(hoc_is_object_arg(2)){flag=1;nz=vector_arg_px(2,&z);if(ny!=nz)z=vector_newsize(vector_arg(2),ny);}elseif(hoc_is_double_arg(2)){val=*getarg(2);}elseif(hoc_is_str_arg(2)){op=gargstr(2);if(strcmp(op,"EQU")==0)equ=1;elseif(strcmp(op,"INC")==0)inc=1;else{printf("indset%snotrecog\n",op);hxe();}}if(equ){val2=*getarg(3);val=*getarg(4);for(i=0;i<ny;i++)if(y[i]==val2)x[i]=val;}else{if(ifarg(3)){val2=*getarg(3);if(inc&&val2==0){printf("vecst:indsetERRAincof0\n");hxe();}if(inc)inc=val2;elsefor(i=0;i<nx;i++){x[i]=val2;}}for(i=0;i<ny;i++){if(y[i]>nx){printf("vecst:insetERRBIndexexceedsvectorsize%g%d\n",y[i],nx);hxe();}if(inc!=0)x[(int)y[i]]+=inc;elseif(flag)x[(int)y[i]]=z[i];elsex[(int)y[i]]=val;}}return(double)i;}ENDVERBATIMVERBATIMstaticdoublemkind(void*vv){inti,j,nx,ny,flag;double*x,*y,flox,last,min,max;nx=vector_instance_px(vv,&x);ny=vector_arg_px(1,&y);flag=ifarg(2)?(int)*getarg(2):0;min=x[0];max=x[nx-1];ny=max-min+4+(flag?0:min);if(ny>1e6)printf("vecst:mkind()WARNING:indexofsize%dbeingbuilt\n",ny);y=vector_newsize(vector_arg(1),ny);y[0]=0.;y[ny-3]=nx;y[ny-2]=min;y[ny-1]=max;if(min==max){printf("vecst:mkind()ERRA:min==max%g%g\n",min,max);hxe();}if(!flag)for(j=1;j<=min;j++)y[j]=0.;elsej=1;for(i=1,last=floor(min);i<nx;i++){flox=floor(x[i]);if(flox==last)continue;if(flox<last){printf("vecst:mkind()ERRB:non-monovec.x[%d]<x[%d]\n",i,i-1);hxe();}for(;flox>=last+1;j++,last++)y[j]=(double)i;last=flox;}returnmin;}ENDVERBATIMVERBATIMstaticdoublecirc(void*vv){inti,nx,ny,flag,lnew;double*x,*y,x0,y0,x1,y1,rad,theta;lnew=0;nx=vector_instance_px(vv,&x);ny=vector_arg_px(1,&y);if(ny!=nx){hoc_execerror("v.circ:Vectorsizesdon'tmatch.",0);}x0=*getarg(2);y0=*getarg(3);rad=*getarg(4);if(ifarg(6)){x1=rad;y1=*getarg(5);rad=sqrt((x0-x1)*(x0-x1)+(y0-y1)*(y0-y1));lnew=*getarg(6);}elseif(ifarg(5))lnew=*getarg(5);if(lnew){nx=lnew;x=vector_newsize(vv,nx);y=vector_newsize(vector_arg(1),ny=nx);}for(i=0,theta=0;i<nx;theta+=2*M_PI/(nx-1),i++){x[i]=y0+rad*sin(theta);y[i]=x0+rad*cos(theta);}returnrad;}ENDVERBATIMVERBATIMstaticdoubleroton(void*vv){inti,j,nx,nz,flag;double*x,*z,val[10];nx=vector_instance_px(vv,&x);flag=0;if(hoc_is_object_arg(1)){flag=1;nz=vector_arg_px(1,&z);}else{for(i=1;i<=10&&ifarg(i);i++)val[i-1]=*getarg(i);nz=i-1;}if(nz>nx){printf("v.roton:Can'trotate%dvalsonvecofsize%d\n",nz,nx);hxe();}for(i=nz,j=0;i<nx;i++,j++)x[j]=x[i];for(i=nx-nz,j=0;j<nz;i++,j++)x[i]=flag?z[j]:val[j];return(double)nz;}ENDVERBATIMVERBATIMstaticdoublefewind(void*vv){inti,j,k,nx,ni,nv[VRRY],num,flag;Object*ob;double*x,*ind,*vvo[VRRY];char*ix;nx=vector_instance_px(vv,&x);ni=vector_arg_px(1,&ind);ob=*hoc_objgetarg(2);if(ifarg(3))flag=(int)*getarg(3);elseflag=0;num=ivoc_list_count(ob);if(num>VRRY)hoc_execerror("ERR:fewindcanonlyhandleVRRYvectors",0);if(flag)ix=(char*)ecalloc(nx,sizeof(char));if(!flag&&nx<ni){printf("fewindWARNINGnx!=ni:%d!=%d,settingnonuniqflag\n",nx,ni);flag=1;}for(i=0;i<num;i++){nv[i]=list_vector_px(ob,i,&vvo[i]);if(nx!=nv[i]){printf("fewindERR%d%d%d\n",i,nx,nv[i]);hoc_execerror("Vectorsmustallbesamesize:",0);}}if(nx>scrsz){if(scrsz>0){free(scr);scr=(unsignedint*)NULL;}scrsz=nx+10000;scr=(unsignedint*)ecalloc(scrsz,sizeof(int));}if(flag){for(i=0;i<nx;i++)ix[i]=0;for(i=0,k=0;i<ni&&k<nx;i++){j=(int)ind[i];if(ix[j]==0){if(j>=nx||j<0){printf("fewindERR1A%d%d\n",j,nx);free(ix);hxe();}scr[k]=j;ix[j]=1;k++;}}ni=nx;}elsefor(i=0;i<ni;i++){scr[i]=(int)ind[i];if(scr[i]>=nx||scr[i]<0){printf("fewindERR1%d%d\n",scr[i],nx);hoc_execerror("Indexvectorout-of-bounds",0);}}if(flag)for(i=0;i<ni;i++)if(ix[i]==0){printf("fewindERR2%d\n",i);hxe();}for(j=0;j<num;j++){for(i=0;i<ni;i++)x[i]=vvo[j][scr[i]];for(i=0;i<ni;i++)vvo[j][i]=x[i];vvo[j]=list_vector_resize(ob,j,ni);}if(flag)free(ix);return(double)ni;}ENDVERBATIMVERBATIMstaticdoublefindx(void*vv){inti,j,ni,nx,av[VRRY],bv[VRRY],num;Object*ob1,*ob2;double*ind,*avo[VRRY],*bvo[VRRY];ni=vector_instance_px(vv,&ind);ob1=*hoc_objgetarg(1);ob2=*hoc_objgetarg(2);num=ivoc_list_count(ob1);i=ivoc_list_count(ob2);if(i!=num)hoc_execerror("findx****ERRA****:listshavedifferentcounts",0);if(num>VRRY)hoc_execerror("findx****ERRB****:canonlyhandleVRRYvectors",0);for(i=0;i<num;i++){av[i]=list_vector_px(ob1,i,&avo[i]);if(av[0]!=av[i]){printf("findx****ERRC****%d%d%d\n",i,av[0],av[i]);hoc_execerror("Srcvectorsmustallbesamesize:",0);}}nx=av[0];for(i=0;i<num;i++){bv[i]=list_vector_px2(ob2,i,&bvo[i],&vv);if(vector_buffer_size(vv)<ni){printf("findx****ERRD****arg#%dneed:%dsz:%d\n",num+i+1,ni,vector_buffer_size(vv));hoc_execerror("Destinationvectorwithinsufficientsize:",0);}else{vector_resize(vv,ni);}}if(ni>scrsz){if(scrsz>0){free(scr);scr=(unsignedint*)NULL;}scrsz=ni+10000;scr=(unsignedint*)ecalloc(scrsz,sizeof(int));}for(i=0;i<ni;i++){scr[i]=(int)ind[i];if(scr[i]>=nx||scr[i]<0){printf("findx****ERRE********IND:%dSZ:%d\n",scr[i],nx);hoc_execerror("Indexvectorout-of-bounds",0);}}for(j=0,i=0;j<num;j++)for(i=0;i<ni;i++)bvo[j][i]=avo[j][scr[i]];return(double)ni;}ENDVERBATIMVERBATIMstaticdoublelma(void*vv){inti,j,k,ia,ib,ni,nj,nx,av[VRRY],bv[VRRY],num,numb,beg,end,*xx;Object*ob1,*ob2;double*ind,*avo[VRRY],*bvo[VRRY],mul,mmul,add,madd;ni=vector_instance_px(vv,&ind);xx=iscrset(ni);ob1=*hoc_objgetarg(1);ob2=*hoc_objgetarg(2);beg=(int)*getarg(3);end=(int)*getarg(4);mul=ifarg(5)?*getarg(5):1;add=ifarg(6)?*getarg(6):0;num=ivoc_list_count(ob1);numb=ivoc_list_count(ob2);if((ni==0&&numb!=num)||(ni>0&&ni!=num)){printf("lmaERRA:wrong#ofoutvecs:%d(inlist:%d,inds:%d)\n",numb,num,ni);hxe();}for(i=0,j=0;i<ni;i++){if(ind[i])xx[j++]=i;if(j>num){printf("lmaERRA1OOB:%d%d\n",j,num);hxe();}}nj=j;if(num>VRRY){printf("lma****ERRB****:canonlyhandle%dvectors\n",VRRY);hxe();}for(i=0;i<num;i++){av[i]=list_vector_px(ob1,i,&avo[i]);if(av[0]!=av[i]){printf("lma****ERRC****%d%d%d\n",i,av[0],av[i]);hoc_execerror("Srcvectorsmustallbesamesize:",0);}}nx=av[0];if(beg>=end||beg<0||end>nx){printf("lmaERRC1OOB%d-%d(%d)\n",beg,end,nx);hxe();}for(i=0;i<num;i++){bv[i]=list_vector_px2(ob2,i,&bvo[i],&vv);if(bv[i]!=(end-beg))bvo[i]=vector_newsize(vv,end-beg);}if(nj>0){for(ia=0,ib=0,mmul=1.,madd=0.;ia<nj;ia++,ib++){j=xx[ia];for(i=beg,k=0;i<end;i++,k++)bvo[ib][k]=mmul*avo[j][i]+madd;if(mul!=1)mmul*=mul;if(add!=0)madd+=add;}}elsefor(j=0,mmul=1,madd=0;j<num;j++){for(i=beg,k=0;i<end;i++,k++)bvo[j][k]=mmul*avo[j][i]+madd;if(mul!=1)mmul*=mul;if(add!=0)madd+=add;}return(double)j;}ENDVERBATIMVERBATIMstaticdoublesindx(void*vv){inti,j,ni,nx,av[VRRY],bv[VRRY],num;Object*ob1,*ob2;double*ind,*avo[VRRY],*bvo[VRRY];ni=vector_instance_px(vv,&ind);ob1=*hoc_objgetarg(1);ob2=*hoc_objgetarg(2);num=ivoc_list_count(ob1);i=ivoc_list_count(ob2);if(num!=i)hoc_execerror("sindx****ERRA****:twoveclistshavedifferentcounts",0);if(num>VRRY)hoc_execerror("sindx****ERRB****:canonlyhandleVRRYvectors",0);for(i=0;i<num;i++){av[i]=list_vector_px(ob1,i,&avo[i]);if(av[0]!=av[i]){printf("sindx****ERRC****%d%d%d\n",i,av[0],av[i]);hoc_execerror("Dest.vectorsmustallbesamesize:",0);}}nx=av[0];for(i=0;i<num;i++){bv[i]=list_vector_px(ob2,i,&bvo[i]);if(bv[i]!=ni){printf("sindx****ERRD****arg#%ddoesnotematchindlength%dvs%d\n",num+i+1,ni,bv[i]);hoc_execerror("Sourcevectorwithinsufficientsize:",0);}}if(ni>scrsz){if(scrsz>0){free(scr);scr=(unsignedint*)NULL;}scrsz=ni+10000;scr=(unsignedint*)ecalloc(scrsz,sizeof(int));}for(i=0;i<ni;i++){scr[i]=(int)ind[i];if(scr[i]>=nx||scr[i]<0){printf("sindx****ERRE****IND:%dSZ:%d\n",scr[i],nx);hoc_execerror("Indexvectorout-of-bounds",0);}}for(j=0,i=0;j<num;j++)for(i=0;i<ni;i++)avo[j][scr[i]]=bvo[j][i];return(double)ni;}ENDVERBATIMVERBATIMstaticdoublesindv(void*vv){inti,j,ni,nx,av[VRRY],bv,num;Object*ob;double*ind,*avo[VRRY],*bvo;ni=vector_instance_px(vv,&ind);ob=*hoc_objgetarg(1);bv=vector_arg_px(2,&bvo);num=ivoc_list_count(ob);if(num>VRRY)hoc_execerror("sindv****ERRA****:canonlyhandleVRRYvectors",0);for(i=0;i<num;i++){av[i]=list_vector_px(ob,i,&avo[i]);if(av[0]!=av[i]){printf("sindv****ERRC****%d%d%d\n",i,av[0],av[i]);hoc_execerror("Dest.vectorsmustallbesamesize:",0);}}nx=av[0];if(bv!=num){printf("sindv****ERRD****Vectorargdoesnotematchlistcount%dvs%d\n",num,bv);hoc_execerror("Sourcevectoriswrongsize:",0);}if(ni>scrsz){if(scrsz>0){free(scr);scr=(unsignedint*)NULL;}scrsz=ni+10000;scr=(unsignedint*)ecalloc(scrsz,sizeof(int));}for(i=0;i<ni;i++){scr[i]=(int)ind[i];if(scr[i]>=nx||scr[i]<0){printf("sindv****ERRE****IND:%dSZ:%d\n",scr[i],nx);hoc_execerror("Indexvectorout-of-bounds",0);}}for(j=0,i=0;j<num;j++)for(i=0;i<ni;i++)avo[j][scr[i]]=bvo[j];return(double)ni;}ENDVERBATIMVERBATIMstaticdoubleslct(void*vv){inti,j,k,m,n,p,ni,nk,na,nv[VRRY],num,fl,lc,field[VRRY],lt,rt,flag;Object*lob;double*ind,*key,*arg,*vvo[VRRY],val;ni=vector_instance_px(vv,&ind);nk=vector_arg_px(1,&key);na=vector_arg_px(2,&arg);lob=*hoc_objgetarg(3);if(ifarg(4))flag=(int)*getarg(4);elseflag=0;num=ivoc_list_count(lob);if(num>VRRY)hoc_execerror("ERR:vecst::slctcanonlyhandleVRRYvectors",0);for(i=0,j=0;i<num;i++,j++){nv[i]=list_vector_px(lob,i,&vvo[i]);if(key[j]>=EQV&&key[j]<=EQY){i++;nv[i]=list_vector_px(lob,i,&vvo[i]);}elseif(ni!=nv[i]){printf("vecst::slctERR%d%d%d%d%d\n",i,j,k,ni,nv[i]);hoc_execerror("indexandsearchedvectorsmustallbesamesize:",0);}}for(j=0;j<nk;j++){field[j]=-1;if(key[j]<=EBE&&key[j]>=ALL){field[j]=0;}elsefor(m=1;m<=5;m++){if(key[j]<=EBE*(m+1)&&key[j]>=ALL*(m+1)){key[j]/=(m+1);field[j]=m;}}if(field[j]==-1){printf("vecst::slctERRF%d%g\n",j,key[j]);hxe();}}if(2*nk!=na){printf("vecst::slctERR3%d%d\n",nk,na);hoc_execerror("Argvectormustbedoublekeylength",0);}for(i=0,n=0;i<nk;i++)if(key[i]>=EQV&&key[i]<=EQY)n++;if(nk+n!=num){printf("vecst::slctERR2%d(keys)+%d(EQV/W)!=%d(vecs)\n",nk,n,num);hoc_execerror("Keylengthmustbenumberofvecs+numofEQV/W",0);}for(j=0,k=0,m=0;j<ni;j++){for(i=0,m=0,n=0,fl=1;i<num;i++,n++,m+=2){if(field[n]==0)val=vvo[i][j];elseUNCODE(vvo[i][j],field[n],val);if(key[n]==ALL)continue;if(key[n]==NOZ){if(val==0.){fl=0;break;}elsecontinue;}elseif(key[n]==POS){if(val<=0.){fl=0;break;}elsecontinue;}elseif(key[n]==NEG){if(val>=0.){fl=0;break;}elsecontinue;}elseif(key[n]==GTH){if(val<=arg[m]){fl=0;break;}elsecontinue;}elseif(key[n]==GTE){if(val<arg[m]){fl=0;break;}elsecontinue;}elseif(key[n]==LTH){if(val>=arg[m]){fl=0;break;}elsecontinue;}elseif(key[n]==LTE){if(val>arg[m]){fl=0;break;}elsecontinue;}elseif(key[n]==EQU){if(val!=arg[m]){fl=0;break;}elsecontinue;}elseif(key[n]==EQV){if(val!=vvo[i+1][j]){fl=0;break;}else{i++;continue;}}elseif(key[n]==EQW){fl=0;for(p=0;p<nv[i+1];p++)if(val==vvo[i+1][p]){fl=1;break;}if(fl==0)break;else{i++;continue;}}elseif(key[n]==EQX){fl=0;lt=0;rt=nv[i+1]-1;while(lt<=rt){p=(lt+rt)/2;if(val>vvo[i+1][p])lt=p+1;elseif(val<vvo[i+1][p])rt=p-1;else{fl=1;break;}}if(fl==0)break;else{i++;continue;}}elseif(key[n]==EQY){fl=0;lt=0;rt=nv[i+1]-1;while(lt<=rt){p=(lt+rt)/2;if(val>vvo[i+1][p]+LOOSE)lt=p+1;elseif(val<vvo[i+1][p]-LOOSE)rt=p-1;else{fl=1;break;}}if(fl==0)break;else{i++;continue;}}elseif(key[n]==NEQ){if(val==arg[m]){fl=0;break;}elsecontinue;}elseif(key[n]==IBE){if((val<arg[m])||(val>=arg[m+1])){fl=0;break;}elsecontinue;}elseif(key[n]==EBI){if((val<=arg[m])||(val>arg[m+1])){fl=0;break;}elsecontinue;}elseif(key[n]==IBI){if((val<arg[m])||(val>arg[m+1])){fl=0;break;}elsecontinue;}elseif(key[n]==EBE){if((val<=arg[m])||(val>=arg[m+1])){fl=0;break;}elsecontinue;}else{printf("vecst::slctERR4%g\n",key[n]);hoc_execerror("Unknownkey",0);}}if(fl){ind[k++]=j;if(flag==1)break;}}vector_resize(vv,k);return(double)k;}ENDVERBATIMVERBATIMstaticdoubleslor(void*vv){inti,j,k,m,n,p,ni,nk,na,nv[VRRY],num,fl,field[VRRY],lt,rt;Object*lob;double*ind,*key,*arg,*vvo[VRRY],val;ni=vector_instance_px(vv,&ind);nk=vector_arg_px(1,&key);na=vector_arg_px(2,&arg);lob=*hoc_objgetarg(3);num=ivoc_list_count(lob);if(num>VRRY)hoc_execerror("ERR:vecst::slorcanonlyhandleVRRYvectors",0);for(i=0,j=0;i<num;i++,j++){nv[i]=list_vector_px(lob,i,&vvo[i]);if(key[j]>=EQV&&key[j]<=EQY){i++;nv[i]=list_vector_px(lob,i,&vvo[i]);}elseif(ni!=nv[i]){printf("vecst::slorERR%d%d%d%d%d\n",i,j,k,ni,nv[i]);hoc_execerror("indexandsearchedvectorsmustallbesamesize:",0);}}for(j=0;j<num;j++){field[j]=-1;if(key[j]<=EBE&&key[j]>=ALL){field[j]=0;}elsefor(m=1;m<=5;m++){if(key[j]<=EBE*(m+1)&&key[j]>=ALL*(m+1)){key[j]/=(m+1);field[j]=m;}}if(field[j]==-1){printf("vecst::slorERRF%g\n",key[j]);hxe();}}if(2*nk!=na){printf("vecst::slorERR3%d%d\n",nk,na);hoc_execerror("Argvectormustbedoublekeylength",0);}for(i=0,n=0;i<nk;i++)if(key[i]>=EQV&&key[i]<=EQY)n++;if(nk+n!=num){printf("vecst::slorERR2%d(keys)+%d(EQV)!=%d(vecs)\n",nk,n,num);hoc_execerror("Keylengthmustbenumberofvecs+numofEQV",0);}for(j=0,k=0,m=0;j<ni;j++){for(i=0,m=0,n=0,fl=0;i<num;i++,n++,m+=2){if(field[n]==0)val=vvo[i][j];elseUNCODE(vvo[i][j],field[n],val);if(key[n]==ALL){fl=1;break;}if(key[n]==NOZ){if(val==0.)continue;else{fl=1;break;}}elseif(key[n]==POS){if(val<=0.)continue;else{fl=1;break;}}elseif(key[n]==NEG){if(val>=0.)continue;else{fl=1;break;}}elseif(key[n]==GTH){if(val<=arg[m])continue;else{fl=1;break;}}elseif(key[n]==GTE){if(val<arg[m])continue;else{fl=1;break;}}elseif(key[n]==LTH){if(val>=arg[m])continue;else{fl=1;break;}}elseif(key[n]==LTE){if(val>arg[m])continue;else{fl=1;break;}}elseif(key[n]==EQU){if(val!=arg[m])continue;else{fl=1;break;}}elseif(key[n]==EQV){if(val!=vvo[i+1][j])continue;else{i++;fl=1;break;}}elseif(key[n]==EQW){fl=0;for(p=0;p<nv[i+1];p++)if(val==vvo[i+1][p]){fl=1;break;}if(fl==1)break;else{i++;continue;}}elseif(key[n]==EQX){fl=0;lt=0;rt=nv[i+1]-1;while(lt<=rt){p=(lt+rt)/2;if(val>vvo[i+1][p])lt=p+1;elseif(val<vvo[i+1][p])rt=p-1;else{fl=1;break;}}if(fl==1)break;else{i++;continue;}}elseif(key[n]==EQY){printf("EQYnotimplementedforslor()\n");hxe();}elseif(key[n]==NEQ){if(val==arg[m])continue;else{fl=1;break;}}elseif(key[n]==IBE){if((val<arg[m])||(val>=arg[m+1])){continue;}else{fl=1;break;}}elseif(key[n]==EBI){if((val<=arg[m])||(val>arg[m+1])){continue;}else{fl=1;break;}}elseif(key[n]==IBI){if((val<arg[m])||(val>arg[m+1])){continue;}else{fl=1;break;}}elseif(key[n]==EBE){if((val<=arg[m])||(val>=arg[m+1])){continue;}else{fl=1;break;}}else{printf("vecst::slorERR4%g\n",key[n]);hoc_execerror("Unknownkey",0);}}if(fl)ind[k++]=j;}vector_resize(vv,k);return(double)k;}ENDVERBATIMVERBATIMstaticdoublewhi(void*vv){inti,j,nx,na,nb,cnt;double*x,*val,*ind;nx=vector_instance_px(vv,&x);i=vector_arg_px(1,&val);na=vector_arg_px(2,&ind);if(i!=na){printf("vecst:whi()takes2eqlengthvecs:%d%d\n",i,na);hxe();}scrset(na);for(i=0;i<na;i++){scr[i]=0;ind[i]=-1.;}for(i=0,cnt=0;i<nx;i++)for(j=0;j<na;j++){if(x[i]==val[j]){if(scr[j])printf("WARNING%gfoundmulttimes(%g,%d)\n",val[j],ind[j],i);else{ind[j]=(double)i;scr[j]=1;cnt++;}}}for(nb=3;ifarg(nb);nb++){}nb--;if(nb>2){if(nb-2!=na){printf("vecst:whi()wrong#args:%d%d\n",na,nb-2);hxe();}for(i=3,j=0;j<na;i++,j++)*(hoc_pgetarg(i))=ind[j];}return(double)cnt/na;}ENDVERBATIMVERBATIMstaticdoubleiwr(void*vv){inti,j,nx;size_tr;double*x;FILE*f,*hoc_obj_file_arg();f=hoc_obj_file_arg(1);nx=vector_instance_px(vv,&x);scrset(nx);for(i=0;i<nx;i++)scr[i]=(int)x[i];if(!ifarg(2)||!((int)*getarg(2)))r=fwrite(&nx,sizeof(int),1,f);r=fwrite(scr,sizeof(int),nx,f);return(double)nx;}ENDVERBATIMVERBATIMstaticdoubleird(void*vv){inti,j,nx,n;size_tr;double*x;FILE*f,*hoc_obj_file_arg();f=hoc_obj_file_arg(1);nx=vector_instance_px(vv,&x);r=fread(&n,sizeof(int),1,f);if(n>scrsz){if(scrsz>0){free(scr);scr=(unsignedint*)NULL;}scrsz=n+10000;scr=(unsignedint*)ecalloc(scrsz,sizeof(int));}if(n!=nx){nx=vector_buffer_size(vv);if(n<=nx){vector_resize(vv,n);nx=n;}else{printf("%d>%d::",n,nx);hoc_execerror("Vectormaxcapacitytoosmallforird",0);}}r=fread(scr,sizeof(int),n,f);for(i=0;i<nx;i++)x[i]=(double)scr[i];return(double)n;}ENDVERBATIMVERBATIMstaticdoublefread2(void*vv){inti,j,nx,n,type,maxsz;size_tr;double*x;FILE*fp,*hoc_obj_file_arg();BYTEHEADERfp=hoc_obj_file_arg(1);nx=vector_instance_px(vv,&x);maxsz=vector_buffer_size(vv);n=(int)*getarg(2);type=(int)*getarg(3);if(n>maxsz){printf("%d>%d::",n,maxsz);hoc_execerror("Vectormaxcapacitytoosmallforfread2",0);}else{vector_resize(vv,n);}if(type==6||type==16){unsignedint*xs;if(n>scrsz){if(scrsz>0){free(scr);scr=(unsignedint*)NULL;}scrsz=n+10000;scr=(unsignedint*)ecalloc(scrsz,sizeof(int));}xs=(unsignedint*)scr;r=fread(xs,sizeof(int),n,fp);if(type==16)BYTESWAP_FLAG=1;for(i=0;i<n;i++){BYTESWAP(scr[i],int)x[i]=(double)scr[i];}return(double)n;}if(type==3||type==13){float*xf=(float*)malloc(n*(unsigned)sizeof(float));r=fread(xf,sizeof(float),n,fp);if(type==13)BYTESWAP_FLAG=1;for(i=0;i<n;i++){BYTESWAP(xf[i],float)x[i]=(double)xf[i];}free((char*)xf);}elsehoc_execerror("Typeunsupportedinfread2",0);}ENDVERBATIMVERBATIMstaticdoublerevec(void*vv){inti,j,k,nx,ny;double*x,*y;nx=vector_instance_px(vv,&x);if(nx==0)x=vector_newsize(vv,nx=100);for(i=1,k=0;ifarg(i);i++,k++){if(hoc_is_double_arg(i)){if(k>=nx)x=vector_newsize(vv,nx*=4);x[k]=*getarg(i);}else{ny=vector_arg_px(i,&y);if(k+ny>=nx)x=vector_newsize(vv,nx=2*(nx+ny));for(j=0;j<ny;j++,k++)x[k]=y[j];k--;}}vector_resize(vv,k);}ENDVERBATIMVERBATIMstaticdoublehas(void*vv){inti,j,nx,ny;double*x,*y,val;void*vc;nx=vector_instance_px(vv,&x);val=*getarg(1);ny=0;if(ifarg(2))if(hoc_is_object_arg(2)){ny=vector_arg_px(2,&y);vc=vector_arg(2);if(ny==0)y=vector_newsize(vc,ny=100);}for(i=0,j=0;i<nx;i++)if(x[i]==val){if(ifarg(2)){if(ny){if(j>=ny)y=vector_newsize(vc,ny*=4);y[j++]=(double)i;}else{*(hoc_pgetarg(2))=(double)i;return1.0;}}elsereturn1;}if(j>0)vector_resize(vc,j);return(double)j;}ENDVERBATIMVERBATIMstaticdoubleinsct(void*vv){inti,j,k,nx,nv1,nv2,maxsz;double*x,*v1,*v2;nx=vector_instance_px(vv,&x);if(maxsz==0)maxsz=1000;maxsz=vector_buffer_size(vv);x=vector_newsize(vv,maxsz);nv1=vector_arg_px(1,&v1);nv2=vector_arg_px(2,&v2);for(i=0,k=0;i<nv1;i++)for(j=0;j<nv2;j++)if(v1[i]==v2[j]){if(k==maxsz)x=vector_newsize(vv,maxsz*=2);x[k++]=v1[i];}vector_resize(vv,k);return(double)k;}ENDVERBATIMVERBATIMstaticdoublelinsct(void*vv){inti,j,k,nx,maxsz,min,cnt,lt,rt,p,iv,jv,jj,fl;ListVec*pL;double*x,val;nx=vector_instance_px(vv,&x);maxsz=vector_buffer_size(vv);if(maxsz==0)maxsz=1000;x=vector_newsize(vv,maxsz);pL=AllocListVec(*hoc_objgetarg(1));min=(int)*getarg(2);for(iv=0;iv<pL->isz;iv++){if(!ismono1(pL->pv[iv],pL->plen[iv],2)){printf("linsct()ERRAnotmonotonic%d\n",iv);hxe();}if(pL->pv[iv][0]<0){printf("linsct()ERRBnegvaluein%dis%g\n",iv,pL->pv[iv][0]);hxe();}}for(iv=0,k=0;iv<=pL->isz-min+1;iv++)for(j=0;j<pL->plen[iv];j++){val=pL->pv[iv][j];for(i=0,fl=0;i<k;i++)if(val==x[i]){fl=1;break;}if(fl)continue;for(jv=iv+1,cnt=1;jv<pL->isz;jv++){fl=lt=0;rt=pL->plen[jv]-1;while(lt<=rt){p=(lt+rt)/2;if(val>pL->pv[jv][p])lt=p+1;elseif(val<pL->pv[jv][p])rt=p-1;else{fl=1;break;}}if(fl)cnt++;if(cnt>=min){if(k==maxsz)x=vector_newsize(vv,maxsz*=2);x[k++]=val;break;}}}vector_resize(vv,k);return(double)k;}ENDVERBATIMVERBATIMstaticdoublevfill(void*vv){inti,nx,nv1;double*x,*v1;nx=vector_instance_px(vv,&x);nv1=vector_arg_px(1,&v1);for(i=0;i<nx;i++)x[i]=v1[i%nv1];}ENDVERBATIMVERBATIMstaticdoublecull(void*vv){inti,j,k,nx,nv1,nv2,flag;double*x,*v1,*v2,val;nx=vector_instance_px(vv,&x);nv1=vector_arg_px(1,&v1);if(hoc_is_double_arg(2)){val=*getarg(2);nv2=0;}elsenv2=vector_arg_px(2,&v2);x=vector_newsize(vv,nx=nv1);for(i=0,k=0;i<nv1;i++){flag=1;if(nv2){for(j=0;j<nv2;j++)if(v1[i]==v2[j])flag=0;}elseif(v1[i]==val)flag=0;if(flag)x[k++]=v1[i];}vector_resize(vv,k);return(double)k;}ENDVERBATIMVERBATIMstaticdoubleredundout(void*vv){inti,j,nx,nv1,maxsz,ncntr,indflag,cntflag;double*x,*v1,*cntr,val;void*vc;if(ifarg(2))indflag=(int)*getarg(2);elseindflag=0;if(ifarg(3)){cntflag=1;ncntr=vector_arg_px(3,&cntr);vc=vector_arg(3);ncntr=vector_buffer_size(vc);vector_resize(vc,ncntr);for(i=0;i<ncntr;i++)cntr[i]=1.;}elsecntflag=0;nx=vector_instance_px(vv,&x);maxsz=vector_buffer_size(vv);vector_resize(vv,maxsz);nv1=vector_arg_px(1,&v1);val=v1[0];x[0]=(indflag?0:val);if(cntflag){for(j=1,i=1;i<nv1&&j<maxsz&&j<ncntr;i++){if(v1[i]!=val){val=v1[i];x[j++]=(indflag?i:val);}elsecntr[j-1]+=1;}}else{for(j=1,i=1;i<nv1&&j<maxsz;i++)if(v1[i]!=val){val=v1[i];x[j++]=(indflag?i:val);}}if(j>=maxsz){printf("\tredundoutWARNING:ranoutofroom:%d<needed\n",maxsz);}else{vector_resize(vv,j);}if(cntflag)if(j>=ncntr){printf("\tredundoutWARNING:cntrranoutofroom:%d<needed\n",ncntr);}else{vector_resize(vc,j);}return(double)j;}ENDVERBATIMVERBATIMstaticdoublemredundout(void*vv){inti,j,k,m,p,q,maxsz,ns,nx,av[VRRY],bv[VRRY],num,numb,indflag,match;Object*ob,*ob2;double*x,*avo[VRRY],*bvo[VRRY],val[VRRY];void*vva[VRRY],*vvb[VRRY];nx=vector_instance_px(vv,&x);ob=*hoc_objgetarg(1);if(ifarg(2))indflag=(int)*getarg(2);elseindflag=0;if(ifarg(3)){ob2=*hoc_objgetarg(3);numb=ivoc_list_count(ob2);}elsenumb=0;maxsz=vector_buffer_size(vv);if(indflag)vector_resize(vv,maxsz);num=ivoc_list_count(ob);if(num>VRRY)hoc_execerror("mredundout****ERRA****:canonlyhandleVRRYvectors",0);for(i=0;i<num;i++){av[i]=list_vector_px2(ob,i,&avo[i],&vva[i]);if(av[0]!=av[i]){printf("mredundout****ERRC****%d%d%d\n",i,av[0],av[i]);hoc_execerror("Vectorsmustallbesamesize:",0);}}ns=av[0];for(i=0;i<numb;i++){bv[i]=list_vector_px2(ob2,i,&bvo[i],&vvb[i]);if(ns!=bv[i]){printf("mredundout****ERRC2****%d%d%d\n",i,ns,bv[i]);hoc_execerror("Vectorsmustallbesamesize:",0);}}if(ns/4>scrsz){if(scrsz>0){free(scr);scr=(unsignedint*)NULL;}scrsz=ns/4+10000;scr=(unsignedint*)ecalloc(scrsz,sizeof(int));}for(j=0;j<num;j++)val[j]=avo[j][0];for(i=1,k=0;i<ns;i++){for(j=0,match=1;j<num;j++){if(val[j]!=avo[j][i]){match=0;break;}}if(match){if(k>=scrsz){printf("mredundout****ERRD****overscrsize%d\n",k);hxe();}scr[k++]=i;}elsefor(j=0;j<num;j++)val[j]=avo[j][i];}if(indflag){if(k>maxsz){printf("mredundout****ERRE****vecoverflow%d>%d\n",k,maxsz);hxe();}for(i=0;i<k;i++)x[i]=(double)scr[i];vector_resize(vv,k);}else{if(k==0)return(double)k;for(i=0,p=scr[0];i<k-1;i++){for(m=scr[i],p--;m<scr[i+1];m++,p++){for(j=0;j<num;j++)avo[j][p]=avo[j][m];for(j=0;j<numb;j++)bvo[j][p]=bvo[j][m];}}for(m=scr[i],p--;m<ns;m++,p++){for(j=0;j<num;j++)avo[j][p]=avo[j][m];for(j=0;j<numb;j++)bvo[j][p]=bvo[j][m];}for(j=0;j<num;j++)vector_resize(vva[j],ns-k);for(j=0;j<numb;j++)vector_resize(vvb[j],ns-k);}return(double)k;}ENDVERBATIMVERBATIMstaticdoublejoin(void*vv){inti,j,k,m,p,q,maxsz,npiva,npivb,av[VRRY],bv[VRRY],num,numb,indflag,match;Object*ob,*ob2;double*piva,*pivb,*avo[VRRY],*bvo[VRRY],val[VRRY];void*vva[VRRY],*vvb[VRRY];npiva=vector_instance_px(vv,&piva);npivb=vector_arg_px(1,&pivb);ob=*hoc_objgetarg(2);ob2=*hoc_objgetarg(3);num=ivoc_list_count(ob);numb=ivoc_list_count(ob2);if(num>VRRY)hoc_execerror("join****ERRA****:canonlyhandleVRRYvectors",0);if(num!=numb)hoc_execerror("join****ERRB****:different#ofvecsinlists",0);for(i=0;i<num;i++){av[i]=list_vector_px2(ob,i,&avo[i],&vva[i]);if(av[0]!=av[i]){printf("join****ERRC****%d%d%d\n",i,av[0],av[i]);hoc_execerror("Vectorsmustallbesamesize:",0);}}for(i=0;i<numb;i++){bv[i]=list_vector_px2(ob2,i,&bvo[i],&vvb[i]);if(bv[0]!=bv[i]){printf("join****ERRC2****%d%d%d\n",i,bv[0],bv[i]);hoc_execerror("Vectorsmustallbesamesize:",0);}}for(i=0,j=0;i<npiva;i++){for(;piva[i]!=pivb[j]&&j<npivb;j++);if(j==npivb){printf("%gnotfoundinPivotB\n",piva[i]);hxe();}for(k=0;k<num;k++)avo[k][i]=bvo[k][j];}return(double)k;}ENDVERBATIMVERBATIMstaticdoublevscl(double*x,doublen){inti;doublemax,min,r,sf,b,a;max=-1e9;min=1e9;a=-1;b=1;for(i=0;i<n;i++){if(x[i]>max)max=x[i];if(x[i]<min)min=x[i];}r=max-min;sf=(b-a)/r;for(i=0;i<n;i++)x[i]=(x[i]-min)*sf+a;}ENDVERBATIMVERBATIMstaticdoublescl(void*vv){inti,j,k,nx,nsrc,nfilt,ntmp;double*x,*src,*filt,*tmp,sum,lpad,rpad;nx=vector_instance_px(vv,&x);nsrc=vector_arg_px(1,&src);if(nx!=nsrc){hoc_execerror("scl:Vectorsnotsamesize:",0);}for(i=0;i<nx;i++)x[i]=src[i];vscl(x,nx);}ENDVERBATIMVERBATIMstaticdoublesccvlv(void*vv){inti,j,k,nx,nsrc,nfilt,ntmp;double*x,*src,*filt,*tmp,sum,lpad,rpad;nx=vector_instance_px(vv,&x);nsrc=vector_arg_px(1,&src);nfilt=vector_arg_px(2,&filt);ntmp=vector_arg_px(3,&tmp);if(nx!=nsrc){hoc_execerror("sccvlv:Vectorsnotsamesize:",0);}if(nfilt>nsrc){hoc_execerror("sccvlv:Filterbiggerthansource",0);}if(nfilt!=ntmp){hoc_execerror("sccvlv:Filter(arg2)andtmpvector(arg3)diffsize",0);}for(i=0;i<nx;i++){x[i]=0.0;for(j=0,k=i-(int)(nfilt/2);j<nfilt&&k>0&&k<nsrc;j++,k++)tmp[j]=src[k];vscl(tmp,j-1);for(k=0;k<j;k++)x[i]+=filt[k]*tmp[k];}}ENDVERBATIMVERBATIMstaticdoublescxing(void*vv){inti,j,k,nx,nsrc,f,ntmp,maxsz;double*x,*src,*filt,*tmp,sum,maxsum,th;nx=vector_instance_px(vv,&x);nsrc=vector_arg_px(1,&src);ntmp=vector_arg_px(2,&tmp);if(nx!=nsrc){hoc_execerror("scxing:Vectorsnotsamesize:",0);}th=0.0;maxsum=-1e9;for(i=0;i<nx;i++)x[i]=0.;for(i=ntmp/2+1;i<nx-ntmp/2-1;i++){for(j=0,k=i-(int)(ntmp/2);j<ntmp;k++,j++)tmp[j]=src[k];vscl(tmp,j-1);for(k=0,f=0,sum=0.;k<nsrc;k++){if(tmp[k]>th){if(f==0){sum+=1;f=1;}}else{if(f==1){f=0;sum+=1;}}}if(sum>maxsum)maxsum=sum;x[i]=sum;}return(double)maxsum;}ENDVERBATIMVERBATIMstaticdoublecvlv(void*vv){inti,j,k,nx,nsrc,nfilt;double*x,*src,*filt,sum,lpad,rpad;nx=vector_instance_px(vv,&x);nsrc=vector_arg_px(1,&src);nfilt=vector_arg_px(2,&filt);if(nx!=nsrc){hoc_execerror("Vectorsnotsamesize:",0);}if(nfilt>nsrc){hoc_execerror("Filterbiggerthansource",0);}for(i=0;i<nx;i++){x[i]=0.0;for(j=0,k=i-(int)(nfilt/2);j<nfilt;j++,k++){if(k>0&&k<nsrc-1)x[i]+=filt[j]*src[k];}}}ENDVERBATIMVERBATIMstaticdoubleintrp(void*vv){inti,la,lb,nx;double*x,fl,a,b;nx=vector_instance_px(vv,&x);fl=*getarg(1);i=0;a=x[0];la=0;if(a==fl)a=0;while(i<nx-1){for(i=la+1;x[i]==fl&&i<nx-1;i++);b=x[i];lb=i;for(i=la+1;i<lb;i++)x[i]=a+(b-a)/(lb-la)*(i-la);a=b;la=lb;}return(double)fl;}ENDVERBATIMVERBATIMstaticdoublesumabs(void*vv){inti,nx;double*x,sum;nx=vector_instance_px(vv,&x);for(sum=0,i=0;i<nx;i++)sum+=fabs(x[i]);returnsum;}ENDVERBATIMVERBATIMstaticdoubleinv(void*vv){inti,nx;double*x,nume;nx=vector_instance_px(vv,&x);if(ifarg(1))nume=*getarg(1);elsenume=1.;for(i=0;i<nx;i++)x[i]=(x[i]==0)?1e9:nume/x[i];return(double)i;}ENDVERBATIMVERBATIMstaticdoublenind(void*vv){inti,j,k,m,nx,ni,nv[VRRY],num,c,last;double*x,*ind,*vvo[VRRY];nx=vector_instance_px(vv,&x);for(i=0;ifarg(i);i++);if(i>VRRY)hoc_execerror("ERR:nindcanonlyhandleVRRYvectors",0);num=i-2;for(i=0;i<num;i++){nv[i]=vector_arg_px(i+2,&vvo[i]);if(nx!=nv[i]){printf("nindERR%d%d%d\n",i,nx,nv[i]);hoc_execerror("Vectorsmustallbesamesize:",0);}}ni=vector_arg_px(1,&ind);c=nx-ni;if(ni>scrsz){if(scrsz>0){free(scr);scr=(unsignedint*)NULL;}scrsz=ni+10000;scr=(unsignedint*)ecalloc(scrsz,sizeof(int));}for(i=0,last=-1;i<ni;i++){scr[i]=(int)ind[i];if(scr[i]<0||scr[i]>=nx)hoc_execerror("nind():Indexoutofbounds",0);if(scr[i]<=last)hoc_execerror("nind():indicesshouldmonoincrease",0);last=scr[i];}for(j=0;j<num;j++){for(i=0,last=-1,m=0;i<ni;i++){for(k=last+1;k<scr[i];k++){x[m++]=vvo[j][k];}last=scr[i];}for(k=last+1;k<nx;k++,m++){x[m]=vvo[j][k];}for(i=0;i<c;i++)vvo[j][i]=x[i];vv=vector_arg(j+2);vector_resize(vv,c);}returnc;}ENDVERBATIMVERBATIMstaticdoublekeyind(void*vv){inti,j,k,ni,nk,nv[VRRY],num;double*ind,*key,*vvo[VRRY];ni=vector_instance_px(vv,&ind);for(i=0;ifarg(i);i++);i--;if(i>VRRY)hoc_execerror("ERR:keyindcanonlyhandleVRRYvectors",0);num=i-1;for(i=0;i<num;i++){nv[i]=vector_arg_px(i+2,&vvo[i]);if(ni!=nv[i]){printf("keyindERR%d%d%d\n",i,ni,nv[i]);hoc_execerror("Non-keyvectorsmustbesamesize:",0);}}nk=vector_arg_px(1,&key);if(nk!=num){printf("keyindERR2%d%d\n",nk,num);hoc_execerror("Keylengthmustbenumberofvecs",0);}k=0;for(j=0;j<ni;j++){for(i=0;i<nk;i++){if(key[i]==ALL)continue;if(key[i]==NOZ){if(vvo[i][j]==0.)break;elsecontinue;}elseif(key[i]==POS){if(vvo[i][j]<=0.)break;elsecontinue;}elseif(key[i]==NEG){if(vvo[i][j]>=0.)break;elsecontinue;}elseif(key[i]!=vvo[i][j])break;}if(i==nk)ind[k++]=j;}vector_resize(vv,k);return(double)k;}ENDVERBATIMVERBATIMstaticdoublethresh(void*vv){inti,nx,ny,cnt;double*x,*y,th;nx=vector_instance_px(vv,&x);cnt=0;if(hoc_is_object_arg(1)){ny=vector_arg_px(1,&y);th=0;if(nx!=ny){hoc_execerror("Vectorsizesdon'tmatchinthresh.",0);}for(i=0;i<nx;i++){if(x[i]>=y[i]){x[i]=1.;cnt++;}else{x[i]=BVBASE;}}}else{th=*getarg(1);for(i=0;i<nx;i++){if(x[i]>=th){x[i]=1.;cnt++;}else{x[i]=BVBASE;}}}returncnt;}ENDVERBATIMVERBATIMstaticdoublenearall(void*vv){registerintlo,hi,mid;inti,j,k,kk,nx,ny,minind,nv[4];Object*ob;void*vvl[4];double*x,*y,*vvo[4],targ,dist,new,max,tmp;nx=vector_instance_px(vv,&x);max=*getarg(1);ny=vector_arg_px(2,&y);ob=*hoc_objgetarg(3);if((nv[0]=ivoc_list_count(ob))!=4){printf("VECST::nearall()ERRA:%d\n",nv[0]);hxe();}for(i=0;i<4;i++){nv[i]=list_vector_px3(ob,i,&vvo[i],&vvl[i]);if(nv[i]!=nv[0]){printf("nearallERRC:%d%d\n",nv[i],nv[0]);hxe();}}for(j=0,k=0;j<ny;j++){targ=y[j];lo=0;hi=nx-1;mid=lo;while(lo<=hi){mid=(hi+lo)/2;if((tmp=x[mid]-targ)>0.)hi=mid-1;elseif(tmp<0)lo=mid+1;elsebreak;}dist=fabs(x[mid]-targ);minind=mid;for(i=-1;i<=1;i+=2){kk=mid+i;if(kk>0&&kk<nx&&(new=fabs(x[kk]-targ))<dist){dist=new;minind=kk;}}if(dist<=max){if(k>=nv[1]){printf("nearallWARN:oor%d%d\n",k,nv[1]);return-1.;}vvo[0][k]=dist;vvo[2][k]=targ;vvo[3][k]=x[minind];k++;}}if(k>scrsz){if(scrsz>0){free(scr);scr=(unsignedint*)NULL;}scrsz=k+10000;scr=(unsignedint*)ecalloc(scrsz,sizeof(int));}for(kk=0,i=0;i<k;){dist=vvo[0][i];targ=vvo[3][i];for(minind=i,j=i+1;vvo[3][j]==targ;j++){if(vvo[0][j]<dist){minind=j;dist=vvo[0][j];}}i=j;scr[kk++]=minind;}for(i=0;i<kk;i++){vvo[0][i]=vvo[0][scr[i]];vvo[1][i]=(vvo[2][scr[i]]+vvo[3][scr[i]])/2.;vvo[2][i]=vvo[2][scr[i]];vvo[3][i]=vvo[3][scr[i]];}for(i=0;i<4;i++)vector_resize(vvl[i],kk);return(double)kk;}ENDVERBATIMVERBATIMstaticdoublenearest(void*vv){inti,nx,minind,flag=0;double*x,targ,dist,new,*to;nx=vector_instance_px(vv,&x);targ=*getarg(1);if(ifarg(3))flag=(int)*getarg(3);dist=1e9;for(i=0;i<nx;i++)if((new=fabs(x[i]-targ))<dist){if(flag&&new==0)continue;dist=new;minind=i;}if(ifarg(2))*(hoc_pgetarg(2))=dist;return(double)minind;}ENDVERBATIMVERBATIMstaticdoubleapprox(void*vv){inti,j,nx,ny;double*x,*y,epsilon;nx=vector_instance_px(vv,&x);ny=vector_arg_px(1,&y);if(nx!=ny){printf("approxdifferentsizevectors%d%d\n",nx,ny);return0;}epsilon=(ifarg(2)?*getarg(2):LOOSE);for(i=0;i<nx;i++)if(x[i]<y[i]-epsilon||x[i]>y[i]+epsilon)return0;return1;}ENDVERBATIMVERBATIMstaticdoublesamp(void*vv){inti,nx,cnt,iOrigSz,maxsz,iNewSz,isrcidx,isrcidx1;double*x,*y,dNewSz,scale,dsrcidx,frac;nx=vector_instance_px(vv,&x);iOrigSz=vector_arg_px(1,&y);dNewSz=*getarg(2);maxsz=vector_buffer_size(vv);iNewSz=(int)dNewSz;if(iNewSz>maxsz){printf("VECSTsampERRA:destvectoosmall:%d%d\n",iNewSz,maxsz);hxe();}vector_resize(vv,iNewSz);scale=(double)iOrigSz/(double)iNewSz;for(i=0;i<iNewSz;i++){dsrcidx=i*scale;isrcidx=(int)dsrcidx;isrcidx1=isrcidx+1<iOrigSz-1?isrcidx+1:iOrigSz-1;frac=dsrcidx-isrcidx;x[i]=(1-frac)*y[isrcidx]+frac*y[isrcidx1];}returniNewSz;}ENDVERBATIMVERBATIMstaticdoubletriplet(void*vv){inti,nx;double*x,*y,a,b;nx=vector_instance_px(vv,&x);a=*getarg(1);b=*getarg(2);for(i=0;i<nx;i+=3)if(x[i]==a&&x[i+1]==b)break;if(i<nx)return(double)i;elsereturn-1.;}ENDVERBATIMVERBATIMstaticdoubleonoff(void*vv){inti,j,n,nv,non,nt,nd,nr,num;double*st,*vol,*obon,*thr,*dur,*refr;n=vector_instance_px(vv,&st);nv=vector_arg_px(1,&vol);non=vector_arg_px(2,&obon);nt=vector_arg_px(3,&thr);nd=vector_arg_px(4,&dur);nr=vector_arg_px(5,&refr);if(n!=nv||n!=non||n!=nt||n!=nd||n!=nr){hoc_execerror("v.onoff:vectorsnotallsamesize",0);}for(i=0,num=0;i<n;i++){obon[i]--;if(obon[i]>0.){st[i]=1.;continue;}if(vol[i]>=thr[i]&&obon[i]<=-refr[i]){st[i]=1.;obon[i]=dur[i];num++;}else{st[i]=BVBASE;}}return(double)num;}ENDVERBATIMVERBATIMstaticdoublebpeval(void*vv){inti,n,no,nd,flag=0;doubleadd,div;double*vo,*outp,*del;n=vector_instance_px(vv,&vo);no=vector_arg_px(1,&outp);nd=vector_arg_px(2,&del);if(ifarg(3)&&ifarg(4)){add=*getarg(3);div=*getarg(4);flag=1;}if(n!=no||n!=nd)hoc_execerror("v.bpeval:vectorsnotallsamesize",0);if(flag){for(i=0;i<n;i++)vo[i]=((outp[i]+add)/div)*(1.-1.*((outp[i]+add)/div))*del[i];}else{for(i=0;i<n;i++)vo[i]=outp[i]*(1.-1.*outp[i])*del[i];}}ENDVERBATIMVERBATIMstaticdoublesedit(void*vv){inti,n,ni,f=0;double*x,*ind,th,val;Symbol*s;char*op;op=gargstr(1);n=vector_instance_px(vv,&x);sprintf(op,"helloworld");return(double)n;}ENDVERBATIMVERBATIMstaticdoublew(void*vv){inti,n,ni,c,f;double*x,*ind,th,val;Symbol*s;char*op;if(!ifarg(1)){printf("v1.w('op',thresh[,val,v2])\n");printf("a.wherethatsetselementsinv1toval(default0),ifv2=>onlylookattheseelements\n");printf("'op'=='functionname'isa.applytargetedbyv2calledasfunc(x[i],thresh,val)\n");return-1.;}op=gargstr(1);n=vector_instance_px(vv,&x);th=*getarg(2);f=c=0;if(ifarg(3)){val=*getarg(3);}else{val=0.0;}if(ifarg(4)){ni=vector_arg_px(4,&ind);f=1;}if(!strcmp(op,"==")){if(f==1){for(i=0;i<ni;i++){if(x[(int)ind[i]]==th){x[(int)ind[i]]=val;c++;}}}else{for(i=0;i<n;i++){if(x[i]==th){x[i]=val;c++;}}}}elseif(!strcmp(op,"!=")){if(f==1){for(i=0;i<ni;i++){if(x[(int)ind[i]]!=th){x[(int)ind[i]]=val;c++;}}}else{for(i=0;i<n;i++){if(x[i]!=th){x[i]=val;c++;}}}}elseif(!strcmp(op,">")){if(f==1){for(i=0;i<ni;i++){if(x[(int)ind[i]]>th){x[(int)ind[i]]=val;c++;}}}else{for(i=0;i<n;i++){if(x[i]>th){x[i]=val;c++;}}}}elseif(!strcmp(op,"<")){if(f==1){for(i=0;i<ni;i++){if(x[(int)ind[i]]<th){x[(int)ind[i]]=val;c++;}}}else{for(i=0;i<n;i++){if(x[i]<th){x[i]=val;c++;}}}}elseif(!strcmp(op,">=")){if(f==1){for(i=0;i<ni;i++){if(x[(int)ind[i]]>=th){x[(int)ind[i]]=val;c++;}}}else{for(i=0;i<n;i++){if(x[i]>=th){x[i]=val;c++;}}}}elseif(!strcmp(op,"<=")){if(f==1){for(i=0;i<ni;i++){if(x[(int)ind[i]]<=th){x[(int)ind[i]]=val;c++;}}}else{for(i=0;i<n;i++){if(x[i]<=th){x[i]=val;c++;}}}}elseif((s=hoc_lookup(op))){if(f==1){for(i=0;i<ni;i++){hoc_pushx(x[(int)ind[i]]);hoc_pushx(th);hoc_pushx(val);x[(int)ind[i]]=hoc_call_func(s,3);}}else{for(i=0;i<n;i++){hoc_pushx(x[i]);hoc_pushx(th);hoc_pushx(val);x[i]=hoc_call_func(s,3);}}}return(double)c;}ENDVERBATIMVERBATIMstaticdoubleslone(void*vv){inti,j,n,ni,nsrc,maxsz;double*x,*src,val,max,min;n=vector_instance_px(vv,&x);maxsz=vector_buffer_size(vv);vector_resize(vv,maxsz);nsrc=vector_arg_px(1,&src);val=*getarg(2);if(ifarg(3))ni=(int)*getarg(3);else{min=src[0];max=src[nsrc-1];ni=(int)(val-min)/(max-min)*(double)(nsrc-1);}if(src[ni]<val){for(i=ni;src[i]!=val&&i<nsrc;i++);}else{for(i=ni;src[i]!=val&&i>=0;i--);for(;src[i]==val&&i>=0;i--);i++;}for(j=0;src[i]==val&&j<maxsz&&i<nsrc;i++,j++)x[j]=i;if(j==maxsz)printf("vecstsloneWARN:OOR%d%d\n",j,maxsz);vector_resize(vv,j);return(double)(i-1);}ENDVERBATIMVERBATIMstaticdoublexing(void*vv){inti,j,d2f,nsrc,ndest,ntvec,f,maxsz,tvf;double*src,*dest,*dest2,*tvec,th;th=0.;tvf=0;ndest=vector_instance_px(vv,&dest);nsrc=vector_arg_px(1,&src);i=2;if(ifarg(i)){if(hoc_is_double_arg(i))th=*getarg(i);else{ntvec=vector_arg_px(i,&tvec);tvf=1;}i++;if(ifarg(i)&&hoc_is_double_arg(i))th=*getarg(i++);}maxsz=vector_buffer_size(vv);vector_resize(vv,maxsz);if(ifarg(i)){dest2=vector_newsize(vector_arg(i),maxsz);d2f=i;}elsed2f=0;if(tvf&&nsrc!=ntvec)hoc_execerror("v.xing:vectorsnotallsamesize",0);for(i=0,f=0,j=0;i<nsrc;i++){if(src[i]>th){if(f==0){if(j>=maxsz){printf("(%d)::",maxsz);hoc_execerror("Destvectoosmallinxing",0);}if(i>0){if(INTERP_VECST){if(tvf){dest[j++]=tvec[i-1]+(tvec[i]-tvec[i-1])*(th-src[i-1])/(src[i]-src[i-1]);}else{dest[j++]=(i-1)+(th-src[i-1])/(src[i]-src[i-1]);}}else{if(tvf)dest[j++]=tvec[i];elsedest[j++]=i;}}f=1;}}else{if(f==1){f=0;}if(d2f){if(INTERP_VECST){if(tvf){dest2[j++]=tvec[i-1]+(tvec[i]-tvec[i-1])*(th-src[i-1])/(src[i]-src[i-1]);}else{dest2[j++]=(i-1)+(th-src[i-1])/(src[i]-src[i-1]);}}else{if(tvf)dest2[j++]=tvec[i];elsedest2[j++]=i;}}}}vector_resize(vv,j);if(d2f)vector_resize(vector_arg(d2f),j);return(double)j;}ENDVERBATIMVERBATIMstaticdoublesnap(void*vv){inti,j,nsrc,ndest,ntvec,f,maxsz,size;double*src,*dest,*tvec,mdt,tstop,tt,val;ndest=vector_instance_px(vv,&dest);nsrc=vector_arg_px(1,&src);ntvec=vector_arg_px(2,&tvec);mdt=*getarg(3);maxsz=vector_buffer_size(vv);tstop=tvec[nsrc-1];size=(int)tstop/mdt;if(size>maxsz){printf("%d>%d\n",size,maxsz);hoc_execerror("v.snap:insufficientroomindest",0);}vector_resize(vv,size);if(nsrc!=ntvec)hoc_execerror("v.snap:srcandtvecnotsamesize",0);for(tt=0,i=0;i<size&&tt<=tvec[0];i++,tt+=mdt)dest[i]=src[0];for(j=1,i--,tt-=mdt;i<size;i++,val=-1e9,tt+=mdt){if(tvec[j]>tt)dest[i]=src[j-1];else{for(;j<nsrc&&tvec[j]<=tt;j++)if(src[j]>val)val=src[j];if(val==-1e9)printf("vecst:snap()internalERROR\n");dest[i]=val;}}return(double)size;}ENDVERBATIMVERBATIMstaticdoublexzero(void*vv){inti,n,nv,up,cnt;double*x,*vc,th;n=vector_instance_px(vv,&x);nv=vector_arg_px(1,&vc);if(ifarg(2)){th=*getarg(2);}else{th=0.0;}if(vc[0]<th)up=0;elseup=1;for(i=0,cnt=0;i<nv;i++){if(up){if(vc[i]<th)up=0;}elseif(vc[i]>th){up=1;if(cnt>=nv)x=vector_newsize(vv,(n+=100));x[cnt++]=(double)i;}}x=vector_newsize(vv,cnt);return(double)cnt;}ENDVERBATIMVERBATIMstaticdoublepeak(void*vv){inti,n,nc,ny,up,cnt;double*x,*y,*vc,last;void*vy;n=vector_instance_px(vv,&x);nc=vector_arg_px(1,&vc);if(n==0)x=vector_newsize(vv,n=100);if(ifarg(2))y=vector_newsize(vy=vector_arg(2),ny=n);elseny=0;if(vc[1]-vc[0]<0)up=0;elseup=1;last=vc[1];for(i=2,cnt=0;i<nc;i++){if(up){if(vc[i]-last<0){up=0;if(cnt>=n){x=vector_newsize(vv,(n+=100));if(ny)y=vector_newsize(vy,n);}x[cnt]=(double)(i-1);if(ny)y[cnt]=last;cnt++;}}elseif(vc[i]-last>0)up=1;last=vc[i];}x=vector_newsize(vv,cnt);if(ny)y=vector_newsize(vy,cnt);return(double)cnt;}ENDVERBATIMVERBATIMstaticdoublenegwrap(void*vv){inti,n;double*x,cnt,sig;n=vector_instance_px(vv,&x);if(ifarg(1))sig=(int)*getarg(1);elsesig=1e9;if(sig==0.){for(i=0,cnt=0;i<n;i++)if(x[i]<0){x[i]=0.;cnt++;}}elseif(sig==1e9){for(i=0,cnt=0;i<n;i++)if(x[i]<0){x[i]=-x[i];cnt++;}}else{for(i=0,cnt=0;i<n;i++)if(x[i]<sig){x[i]=2*sig-x[i];cnt++;}}returncnt;}ENDVERBATIMVERBATIMstaticdoublesw(void*vv){inti,n;double*x,fr,to;n=vector_instance_px(vv,&x);fr=*getarg(1);to=*getarg(2);for(i=0;i<n;i++){if(x[i]==fr){x[i]=to;}}return(double)n;}ENDVERBATIMVERBATIMstaticdoubleb2v(void*vv){inti,n,num;double*x;bvec*to;Object*ob;n=vector_instance_px(vv,&x);ob=*(hoc_objgetarg(1));to=(bvec*)ob->u.this_pointer;if(to->size!=n){hoc_execerror("Vectorandbytevecsizesdon'tmatch.",0);}for(i=0;i<n;i++)x[i]=(double)to->x[i];return(double)n;}ENDVERBATIMVERBATIMstaticdoublev2d(void*vv){inti,n,num;double*x,*to;n=vector_instance_px(vv,&x);to=hoc_pgetarg(1);if(ifarg(2)){num=*getarg(2);}else{num=-1;}if(num>-1&&num!=n){hoc_execerror("Vectorsizedoesn'tmatch.",0);}for(i=0;i<n;i++){to[i]=x[i];}return(double)n;}ENDVERBATIMVERBATIMstaticdoublev2p(void*vv){inti,j,n,cnt;double*x;n=vector_instance_px(vv,&x);for(i=0,j=1,cnt=0;ifarg(j)&&i<n;i++,j++){if(hoc_is_double_arg(j))continue;*hoc_pgetarg(j)=x[i];cnt++;}return(double)cnt;}ENDVERBATIMVERBATIMstaticdoublel2p(void*vv){intix,i,j,n,num,cnt;double*x,*y;Object*lob;n=vector_instance_px(vv,&x);lob=*hoc_objgetarg(1);ix=(int)*getarg(2);num=ivoc_list_count(lob);x=vector_newsize(vv,num);for(i=0;i<num;i++){cnt=list_vector_px(lob,i,&y);if(ix>=cnt){printf("vecst:l2p()ERRA:%d%d%d\n",i,ix,cnt);hxe();}x[i]=y[ix];}for(i=0,j=3,cnt=0;ifarg(j)&&i<num;i++,j++){if(hoc_is_double_arg(j))continue;*hoc_pgetarg(j)=x[i];cnt++;}return(double)cnt;}ENDVERBATIMVERBATIMstaticdoublefetch(void*vv){intix,i,j,n,ny,cnt;double*x,*y,val,ret;ListVec*pL;n=vector_instance_px(vv,&x);val=*getarg(1);pL=AllocListVec(*hoc_objgetarg(2));for(ix=0;ix<n;ix++)if(x[ix]==val)break;if(ix==n){if(VERBOSE_VECST)printf("vecst:fetch()WARNING:%gnotfound\n",val);returnERR;}if(hoc_is_object_arg(3)){ny=vector_arg_px(3,&y);if(ny>pL->isz)vector_resize(vector_arg(3),pL->isz);for(i=0,j=0,cnt=0;i<pL->isz&&j<ny;i++,j++){if(ix>pL->plen[i]){printf("vecst:fetch()ERRB:%d%d%x\n",i,ix,(unsignedint)pL->pv[i]);FreeListVec(&pL);hxe();}y[j]=pL->pv[i][ix];cnt++;}ret=y[j-1];}else{for(i=0,j=3,cnt=0;i<pL->isz&&ifarg(j);i++,j++){if(hoc_is_double_arg(j))continue;if(ix>pL->plen[i]){printf("vecst:fetch()ERRB1:%d%d%x\n",i,ix,(unsignedint)pL->pv[i]);FreeListVec(&pL);hxe();}*hoc_pgetarg(j)=ret=pL->pv[i][ix];cnt++;}}FreeListVec(&pL);returnret;}ENDVERBATIMVERBATIMstaticdoublecovar(void*vv){intix,i,j,j2,n,m;double*x,*y,*mean;ListVec*pL;n=vector_instance_px(vv,&x);if(n==0){pL=AllocListVec(*hoc_objgetarg(1));}elsepL=AllocILV(*hoc_objgetarg(1),n,x);if(pL->isz<2){printf("vecst:covar()ERRA:%d\n",pL->isz);FreeListVec(&pL);hxe();}n=pL->isz;m=pL->plen[0];for(i=1;i<pL->isz;i++)if(m!=pL->plen[i]){printf("vecst:covar()ERRB:szmismatch%d%d@%d\n",m,pL->plen[i],i);FreeListVec(&pL);hxe();}y=vector_newsize(vector_arg(2),m*m);mean=(double*)malloc(sizeof(double)*m);for(j=0;j<m;j++){for(i=0,mean[j]=0.;i<n;i++)mean[j]+=pL->pv[i][j];mean[j]/=(double)n;}for(i=0;i<n;i++)for(j=0;j<m;j++)pL->pv[i][j]-=mean[j];for(j=0;j<m;j++)for(j2=j;j2<m;j2++){for(i=0,y[j*m+j2]=0.;i<n;i++)y[j*m+j2]+=pL->pv[i][j]*pL->pv[i][j2];y[j*m+j2]/=(n-1);y[j2*m+j]=y[j*m+j2];}for(i=0;i<n;i++)for(j=0;j<m;j++)pL->pv[i][j]+=mean[j];free(mean);FreeListVec(&pL);returnm;}ENDVERBATIMVERBATIMstaticdoublevlxpose(void*vv){inti,j,k,n,c,c2,sz,err;double*x;ListVec*pL,*pL2;Object*obl;err=0;n=vector_instance_px(vv,&x);if(n==0){pL=AllocListVec(*hoc_objgetarg(1));}elsepL=AllocILV(*hoc_objgetarg(1),n,x);pL2=AllocListVec(obl=*hoc_objgetarg(2));c=pL->isz;c2=pL2->isz;for(j=0;j<c;j++)list_vector_resize(obl,j,pL2->pbuflen[j]);n=pL->plen[0];if(n!=c2)err=1;for(j=1;j<c;j++)if(n!=pL->plen[j]||err){printf("vecst:vlxpose()ERRA:%d%d%d\n",n,pL->plen[j],c2);FreeListVec(&pL);FreeListVec(&pL2);hxe();}for(j=0,k=0;j<c;j++,k++)for(i=0;i<c2;i++){if(k>=pL2->pbuflen[i]){sz=pL2->pbuflen[i];sz=(sz<10)?100:(sz*2);pL2->pv[i]=list_vector_resize(obl,i,pL2->pbuflen[i]=sz);}pL2->pv[i][k]=pL->pv[j][i];}for(j=0;j<c2;j++)list_vector_resize(obl,j,k);FreeListVec(&pL);FreeListVec(&pL2);return(double)n;}ENDVERBATIMVERBATIMstaticdoubleixsort(void*vv){inti,j,n,ntv,c;double*x,*tv;ListVec*pL;Object*obl;n=vector_instance_px(vv,&x);ntv=vector_arg_px(1,&tv);if(ntv!=n){printf("vecst:ixsort()ERR0:diffsize%d%d\n",n,ntv);hxe();}pL=AllocListVec(obl=*hoc_objgetarg(2));if(pL->isz<2){printf("vecst:ixsort()ERRA:%d\n",pL->isz);FreeListVec(&pL);hxe();}c=pL->isz;for(j=0;j<c;j++)list_vector_resize(obl,j,pL->pbuflen[j]);for(j=0;j<n;j++){i=x[j];if(i>=c){printf("vecst:ixsort()ERRB:OOB%d%d\n",i,c);FreeListVec(&pL);hxe();}if(pL->plen[i]>=pL->pbuflen[i]){if(pL->pbuflen[i])pL->pbuflen[i]*=2;elsepL->pbuflen[i]=100;pL->pv[i]=list_vector_resize(obl,i,pL->pbuflen[i]);}pL->pv[i][pL->plen[i]++]=tv[j];}for(j=0;j<c;j++)list_vector_resize(obl,j,pL->plen[j]);FreeListVec(&pL);return(double)n;}ENDVERBATIMVERBATIMstaticdoubled2v(void*vv){inti,n,num;double*x,*fr;n=vector_instance_px(vv,&x);fr=hoc_pgetarg(1);if(ifarg(2)){num=*getarg(2);}else{num=-1;}if(num>-1&&num!=n){hoc_execerror("Vectorsizedoesn'tmatch.",0);}for(i=0;i<n;i++){x[i]=fr[i];}return(double)n;}ENDVERBATIMVERBATIMstaticdoublelcat(void*vv){inti,j,k,n,lc,cap,maxsz;Object*ob1;double*x,*fr;void*vw;n=vector_instance_px(vv,&x);vector_resize(vv,maxsz=vector_buffer_size(vv));ob1=*hoc_objgetarg(1);lc=ivoc_list_count(ob1);for(i=0,j=0;i<lc&&j<maxsz;i++){cap=list_vector_px2(ob1,i,&fr,&vw);for(k=0;k<cap&&j<maxsz;k++,j++)x[j]=fr[k];}if(i<lc||k<cap)printf("vecstlcatWARN:notallvecscopied\n");vector_resize(vv,j);return(double)j;}ENDVERBATIMVERBATIMstaticdoublemkcode(void*vv){inti,j,k,n,num,bits;Object*ob;double*x,*vvo[5];n=vector_instance_px(vv,&x);ob=*hoc_objgetarg(1);if(ifarg(2))bits=*getarg(2);elsebits=3;num=ivoc_list_count(ob);if(num!=5)hoc_execerror("mkcode****ERRA****:canonlyhandle5vectors",0);for(i=0;i<num;i++){j=list_vector_px(ob,i,&vvo[i]);if(n!=j){printf("mkcode****ERRC****%d%d%d\n",i,n,j);hoc_execerror("Vectorsmustallbesamesize:",0);}}for(i=0;i<n;i++){for(j=0,x[i]=0;j<5;j++){if(vvo[j][i]<0.||vvo[j][i]>=sc[4]||floor(vvo[j][i]+0.5)!=vvo[j][i]){printf("vec.mkcodeOOB%g>%ginvec[%d].x[%d]\n",vvo[j][i],sc[4],j,i);hxe();}x[i]+=vvo[j][i]*sc[j+1];}}return(double)i;}ENDVERBATIMVERBATIMstaticdoubleuncode(void*vv){inti,j,n,ny,num,field;Object*ob;double*x,*y,*vvo[5],val,old;void*vvv[5];n=vector_instance_px(vv,&x);field=0;if(!ifarg(1)){printf("\tv.uncode(val)--takeapartvalandplaceinvector\n\tv.uncode(VECLIST)--takeapartvectoritemsandplaceinvectorsinlist(cfuncodf)\n\tv.uncode(vec,field)--takeapartvectoritemsandplacerequestedfieldinvector\n\tv.uncode(field,val)--replacefieldinvwithval(cfrecodf)\n\tv.uncode(field,vec)--replacefieldinvwithvaluesfromvec\n");return0.;}elseif(!ifarg(2)){if(hoc_is_double_arg(1)){val=*getarg(1);if(vector_buffer_size(vv)<5){hoc_execerror("uncode****ERRA****:vectortoosmalltoresize(5)",0);}vector_resize(vv,5);for(i=1;i<=5;i++)UNCODE(val,i,x[i-1])returnx[0];}else{ob=*hoc_objgetarg(1);num=ivoc_list_count(ob);if(num>5)hoc_execerror("uncode****ERRA****:canonlyhandle5vectors",0);for(i=0;i<num;i++)if(!list_vector_px4(ob,i,&vvo[i],n)){printf("uncode****ERRC****%d\n",i);hoc_execerror("Vectorsnotbigenough:",0);}for(i=0;i<n;i++)for(j=1;j<=num;j++)UNCODE(x[i],j,vvo[j-1][i]);return(double)i;}}else{if(hoc_is_double_arg(1)){field=(int)chkarg(1,1.,5.);ny=-1;if(hoc_is_double_arg(2)){val=chkarg(2,0.,sc[4]-1);if(floor(val+0.5)!=val)hoc_execerror("uncode(vec)****ERRG****:non-intval",0);}else{ny=vector_arg_px(2,&y);if(ny!=n)hoc_execerror("uncode(vec)****ERRH****:diffsizedvecs",0);}for(i=0;i<n;i++){UNCODE(x[i],field,old)if(ny>0){if(y[i]<0.||y[i]>=sc[4]||floor(y[i]+0.5)!=y[i]){printf("vec.uncodeERRJOOB%g(%gmax)at%d\n",y[i],sc[4],i);hxe();}x[i]+=sc[field]*(y[i]-old);}else{x[i]+=sc[field]*(val-old);}}return(double)i;}else{ny=vector_arg_px(1,&y);field=(int)chkarg(2,1.,5.);if(ny!=n)hoc_execerror("uncode(vec)****ERRI****:diffsizedvecs",0);for(i=0;i<n;i++)UNCODE(x[i],field,y[i])return(double)i;}}}ENDVERBATIMVERBATIMintlist_vector_px(Object*ob,inti,double**px){Object*obv;intsz;obv=ivoc_list_item(ob,i);if(!ISVEC(obv))return-1;sz=vector_capacity(obv->u.this_pointer);*px=vector_vec(obv->u.this_pointer);returnsz;}intlist_vector_px2(Object*ob,inti,double**px,void**vv){Object*obv;intsz;obv=ivoc_list_item(ob,i);if(!ISVEC(obv))return-1;sz=vector_capacity(obv->u.this_pointer);*px=vector_vec(obv->u.this_pointer);*vv=(void*)obv->u.this_pointer;returnsz;}intlist_vector_px3(Object*ob,inti,double**px,void**vv){Object*obv;intsz;obv=ivoc_list_item(ob,i);if(!ISVEC(obv))return-1;sz=vector_buffer_size(obv->u.this_pointer);*px=vector_vec(obv->u.this_pointer);*vv=(void*)obv->u.this_pointer;vector_resize(*vv,sz);returnsz;}intlist_vector_px4(Object*ob,inti,double**px,unsignedintn){Object*obv;void*vv;intsz;obv=ivoc_list_item(ob,i);if(!ISVEC(obv))return-1;sz=vector_buffer_size(obv->u.this_pointer);*px=vector_vec(obv->u.this_pointer);vv=(void*)obv->u.this_pointer;if(n>sz){printf("ListvectorWARNING:unabletoresizeto%drequested(%d)\n",n,sz);vector_resize(vv,sz);return0;}elsevector_resize(vv,n);return1;}double*list_vector_resize(Object*ob,inti,intsz){Object*obv;obv=ivoc_list_item(ob,i);if(!ISVEC(obv))return0x0;vector_resize(obv->u.this_pointer,sz);returnvector_vec(obv->u.this_pointer);}ENDVERBATIMVERBATIMdoubleismono1(double*x,intn,intflag){inti;doublelast,gap,ret;last=x[0];ret=1.;if(flag==1){for(i=1;i<n&&x[i]>=last;i++)last=x[i];}elseif(flag==-1){for(i=1;i<n&&x[i]<=last;i++)last=x[i];}elseif(flag==0){for(i=1;i<n&&x[i]==last;i++);}elseif(flag==2){for(i=1;i<n&&x[i]>last;i++)last=x[i];}elseif(flag==-2){for(i=1;i<n&&x[i]<last;i++)last=x[i];}elseif(flag==3){for(i=1;i<n&&x[i]==last+1;i++)last=x[i];}elseif(flag==4){gap=x[1]-last;ret=gap;for(i=1;i<n&&x[i]==last+gap;i++)last=x[i];}elseif(flag==-3){for(i=1;i<n&&x[i]==last-1;i++)last=x[i];}if(i==n)returnret;elsereturn0.;}staticdoubleismono(void*vv){inti,n,flag;double*x,last;n=vector_instance_px(vv,&x);if(ifarg(1)){flag=(int)*getarg(1);}else{flag=1;}return(double)ismono1(x,n,flag);}ENDVERBATIMVERBATIMstaticdoublecount(void*vv){inti,n,cnt;double*x,num;n=vector_instance_px(vv,&x);num=*getarg(1);for(cnt=0,i=0;i<n;i++)if(x[i]==num)cnt++;returncnt;}ENDVERBATIMVERBATIMstaticdoublemuladd(void*vv){inti,n;double*x,mul,add;n=vector_instance_px(vv,&x);mul=*getarg(1);add=*getarg(2);for(i=0;i<n;i++)x[i]=x[i]*mul+add;returnx[0];}ENDVERBATIMVERBATIMstaticdoublebinfind(void*vv){inti,n,lt,rt,mid;double*x,num;n=vector_instance_px(vv,&x);num=*getarg(1);lt=0;rt=n-1;while(lt<=rt){mid=(lt+rt)/2;if(num>x[mid])lt=mid+1;elseif(num<x[mid])rt=mid-1;elsereturn(double)mid;}return-1;}ENDVERBATIMVERBATIMstaticdoubleuniq(void*vv){inti,j,k,n,cnt,ny,nz,flag,lt,rt,mid,res;double*x,*y,*z,lastx,num;void*voi[2];Object*ob;char*ix;n=vector_instance_px(vv,&x);flag=ny=nz=0;if(n==0){printf("vecst:uniqWARNAemptyinputvector\n");return0;}if(ifarg(1)){ny=openvec(1,&y);if(ny==-1){ob=*hoc_objgetarg(1);ny=list_vector_px3(ob,0,&y,&voi[0]);nz=list_vector_px3(ob,1,&z,&voi[1]);if(nz==0)z=vector_newsize(voi[1],nz=100);}else{voi[0]=vector_arg(1);}if(ny==0)y=vector_newsize(voi[0],ny=100);}if(ifarg(2)){if(hoc_is_double_arg(2)){flag=*getarg(2);ix=(char*)ecalloc(n,sizeof(char));nz=0;}else{if(nz>0){printf("ERROR:uniq(list,vec)\n");hxe();}voi[1]=vector_arg(2);if((nz=openvec(2,&z))==0)z=vector_newsize(voi[1],nz=100);}}scrset(n);for(i=0;i<n;i++)scr[i]=i;nrn_mlh_gsort(x,scr,n,cmpdfn);if(ny)y[0]=x[scr[0]];if(nz>0)z[0]=1.;for(i=1,lastx=x[scr[0]],cnt=1;i<n;i++){if(x[scr[i]]>lastx+hoc_epsilon){if(ny){if(cnt>=ny)y=vector_newsize(voi[0],ny*=3);y[cnt]=x[scr[i]];}if(nz>0){if(cnt>=nz)z=vector_newsize(voi[1],nz*=3);z[cnt]=1.;}cnt++;lastx=x[scr[i]];}elseif(nz>0)z[cnt-1]++;}if(ny)vector_resize(voi[0],cnt);if(nz>0)vector_resize(voi[1],cnt);if(flag){z=vector_newsize(voi[1],cnt);for(i=0;i<cnt;i++)ix[i]=1;for(i=0,j=0;i<n;i++){lt=0;rt=cnt-1;res=-1;num=x[i];while(lt<=rt){mid=(lt+rt)/2;if(num>y[mid])lt=mid+1;elseif(num<y[mid])rt=mid-1;else{res=mid;break;}}if(y[res]!=num){printf("uniqERRC:%d%g%g\n",res,y[res],num);hxe();}if(ix[res]){z[j++]=num;ix[res]=0;}if(i%1000==0){for(k=0;k<cnt;k++)if(ix[k])break;if(k==cnt)break;}}free(ix);}return(double)cnt;}staticdoubleunq(void*vv){intn,cnt;double*x,*y,*z;n=vector_instance_px(vv,&x);y=vector_newsize(vector_arg(1),n);z=vector_newsize(vector_arg(2),n);cnt=uniq2(n,x,y,z);y=vector_newsize(vector_arg(1),cnt);z=vector_newsize(vector_arg(2),cnt);return(double)cnt;}intuniq2(intn,double*x,double*y,double*z){inti,j,k,cnt,lt,rt,mid,res;doublelastx,num;if(n==0)return0;scrset(n);for(i=0;i<n;i++)scr[i]=i;nrn_mlh_gsort(x,scr,n,cmpdfn);y[0]=x[scr[0]];for(i=1,lastx=x[scr[0]],cnt=1;i<n;i++){if(x[scr[i]]>lastx+hoc_epsilon){y[cnt]=x[scr[i]];cnt++;lastx=x[scr[i]];}}for(i=0;i<cnt;i++)scr[i]=1;for(i=0,j=0;i<n;i++){lt=0;rt=cnt-1;res=-1;num=x[i];while(lt<=rt){mid=(lt+rt)/2;if(num>y[mid])lt=mid+1;elseif(num<y[mid])rt=mid-1;else{res=mid;break;}}if(y[res]!=num){printf("uniq2ERRC:%d%g%g\n",res,y[res],num);hxe();}if(scr[res]){z[j++]=num;scr[res]=0;}if(i%10*cnt==0){for(k=0;k<cnt;k++)if(scr[k])break;if(k==cnt)break;}}returncnt;}staticdoublenqsvt(void*vv){inti,j,n,flag,cols;double*col,*fcd,*ind,*vvo[100];Object*fcdo,*vl,*obo;Symbol*s;char*proc;if((cols=vector_instance_px(vv,&col))>100){printf("nqsvtERRDonly100cols\n");hxe();}proc=gargstr(1);if(!(s=hoc_lookup(proc))){printf("nqsvtERRA:proc%snotfound\n",proc);hxe();}fcdo=*hoc_objgetarg(2);vector_arg_px(3,&fcd);vl=*hoc_objgetarg(4);if(ifarg(5)){vector_arg_px(5,&ind);flag=1;}elseflag=0;n=list_vector_px(vl,(int)col[0],&vvo[0]);for(i=1;i<cols;i++)if((j=list_vector_px(vl,(int)col[i],&vvo[i]))!=n){printf("nqvtERRBirregcols%d%d%d\n",i,n,j);hxe();}if(flag){}elsefor(i=0;i<n;i++){for(j=0;j<cols;j++){if(fcd[(int)col[j]]==0){hoc_pushx(vvo[j][i]);}elseif(fcd[(int)col[j]]==1){obo=ivoc_list_item(fcdo,(int)vvo[j][i]);hoc_pushobj(&obo);}else{printf("nqvtERRCunhandledtype:%g\n",fcd[j]);hxe();}}hoc_pushx((double)i);hoc_call_func(s,cols+1);}return(double)n;}intopenvec(intarg,double**y){intmax;void*vv;Object*ob;ob=*hoc_objgetarg(arg);if(!ISVEC(ob))return-1;vector_arg_px(arg,y);vv=vector_arg(arg);max=vector_buffer_size(vv);vector_resize(vv,max);if(max==0)printf("openvec():0sizevec\n");returnmax;}double*vector_newsize(void*vv,intn){vector_resize(vv,n);returnvector_vec(vv);}ENDVERBATIMVERBATIMstaticdoublernd(void*vv){inti,n,flag;double*x;flag=(ifarg(1)?(int)*getarg(1):0);n=vector_instance_px(vv,&x);if(flag){for(i=0;i<n;i++)x[i]=floor(x[i]);}elsefor(i=0;i<n;i++)x[i]=floor(x[i]+0.5);return(double)i;}ENDVERBATIMVERBATIMstaticdoublepop(void*vv){intn;double*x;n=vector_instance_px(vv,&x);if(n==0){printf("vec.popERR:emptyvec\n");hxe();}vector_resize(vv,n-1);returnx[n-1];}ENDVERBATIMPROCEDUREExpo(x){TABLERESFROM-20TO20WITH5000RES=exp(x)}FUNCTIONEXP(x){if(x>20||x<-20){printf("EXP(%g)calledwithOOBvalue[-20,20]\n",x)EXP=ERR}else{Expo(x)EXP=RES}}FUNCTIONSUMEXP(){VERBATIMdoublei,min,max,step,sum;if(ifarg(2)){min=*getarg(1);max=*getarg(2);step=ifarg(3)?*getarg(3):1.;}else{max=*getarg(1);min=0.;step=1.;}if(max>20.||min<-20.){printf("SUMEXP()calledwithOOBvalue:%g%g[-20,20]\n",min,max);sum=ERR;}elsefor(i=min,sum=0;i<=max+hoc_epsilon;i+=step){Expo(i);sum+=RES;}_lSUMEXP=sum;ENDVERBATIM}VERBATIMstaticdoublesmgs(void*vv){inti,j,nx,xv,nsum,points,maxsz;double*x,*sum;doublelow,high,step,var,svar,scale,arg;nsum=vector_instance_px(vv,&sum);nx=vector_arg_px(1,&x);low=*getarg(2);high=*getarg(3);step=*getarg(4);var=*getarg(5);points=(int)((high-low)/step+hoc_epsilon);if(nsum!=points){maxsz=vector_buffer_size(vv);if(points<=maxsz){nsum=points;vector_resize(vv,nsum);}else{printf("%d>%d::",points,maxsz);hoc_execerror("Vectormaxcapacitytoosmallinsmgs",0);}}svar=-2.*var*var/step/step;scale=1./sqrt(2.*M_PI)/var;for(j=0;j<points;j++)sum[j]=0.;for(i=0;i<nx;i++){xv=(int)((x[i]-low)/step+0.5);for(j=xv;j<points&&(arg=(j-xv)*(j-xv)/svar)>-20;j++){Expo(arg);sum[j]+=RES;}for(j=xv-1;j>=0&&(arg=(j-xv)*(j-xv)/svar)>-20;j--){Expo(arg);sum[j]+=RES;}}for(j=0;j<points;j++)sum[j]*=scale;returnsvar;}ENDVERBATIMVERBATIMstaticdoublesmsy(void*vv){inti,j,k,nx,nc,nsum,points,maxsz;double*x,*sum,*c;doubledel,tstop,mdt;if(!ifarg(1)){printf("dest.smsy(tvec,CVLV_VEC,tstop[,dt,del])\n");return-1.;}del=0.;mdt=0.2;nsum=vector_instance_px(vv,&sum);nx=vector_arg_px(1,&x);nc=vector_arg_px(2,&c);tstop=*getarg(3);if(ifarg(4))mdt=*getarg(4);if(ifarg(5))del=*getarg(5);points=(int)(tstop/mdt+hoc_epsilon);if(nsum!=points){maxsz=vector_buffer_size(vv);if(points<=maxsz){vector_resize(vv,points);points=nsum;}else{printf("%d>%d::",points,maxsz);hoc_execerror("Destvectortoosmallinsmsy",0);}}for(i=0;i<nx;i++)for(j=0,k=(x[i]+del)/mdt;j<nc&&k<nsum;j++,k++)sum[k]+=c[j];returnpoints;}ENDVERBATIMVERBATIMstaticdoublevrdh(void*vv){intcode,i,num,n[2],maxsz;size_tr;double*x;FILE*f;num=vector_instance_px(vv,&x);maxsz=vector_buffer_size(vv);f=hoc_obj_file_arg(1);num=(int)*getarg(2);if(maxsz<2*num){printf("vrdhERR0need%droominvec\n",2*num);hxe();}vector_resize(vv,2*num);for(i=0;i<num;i++){r=fread(&n,sizeof(int),2,f);if(n[1]!=3){printf("vrdhERRAcode3onlyimplemented%d:%d\n",i,n[1]);hxe();}x[2*i]=(double)n[0];x[2*i+1]=(double)n[1];fseek(f,(long)n[1],SEEK_CUR);}return(double)num;}ENDVERBATIMVERBATIMstaticdoublerdmany(void*vv){intcode,i,j,ni,vsz,ny,nv,num,cnt,n[2],sz,hd,vflag,iflag,last;Object*ob;size_tr;double*vvo[100],sf[2],*ind,*y;FILE*f;vflag=iflag=0;ni=vector_instance_px(vv,&ind);f=hoc_obj_file_arg(1);ob=*hoc_objgetarg(2);if(ifarg(3))cnt=(int)*getarg(3);else{cnt=ni;iflag=1;}if(strncmp(hoc_object_name(ob),"Vector",6)==0)vflag=1;i=2*sizeof(int)+2*sizeof(double);j=2*sizeof(int);r=fread(&n,sizeof(int),2,f);vsz=n[0];code=n[1];fseek(f,(long)-2*sizeof(int),SEEK_CUR);if(DEBUG_VECST)printf("rdmanyDBA:%ld%d%d\n",ftell(f),vsz,code);switch(code){case2:sz=2;hd=i;break;case3:sz=4;hd=j;break;case4:sz=8;hd=j;break;default:hoc_execerror("rdmanyERRE:codenotrecognized",0);}if(vflag){ny=vector_arg_px(2,&y);num=cnt;if(vsz*cnt!=ny){printf("rdmanyERRD:wrongsizevec:%dstatt(%d*%d)%d\n",ny,vsz,cnt,vsz*cnt);hxe();}}else{num=ivoc_list_count(ob);if(num>100)hoc_execerror("rdmanyERRA:canonlyhandle100vectors",0);if(num!=cnt){printf("rdmanyERRB:%d!=%d",num,cnt);hxe();}for(i=0;i<num;i++){nv=list_vector_px(ob,i,&vvo[i]);if(vsz!=nv){printf("rdmanyERRC:Vectorsmustallbesamesize%d%d%d\n",i,vsz,nv);hxe();}}}if(vsz*sz>bufsz){if(scrsz>0){free(scr);scr=(unsignedint*)NULL;}scrsz=vsz+10;scr=(unsignedint*)ecalloc(scrsz,sz);bufsz=scrsz*sz;}if(code==2){unsignedshort*xs;xs=(unsignedshort*)scr;for(last=-1,i=0;i<num;i++){if(iflag){fseek(f,(long)((int)ind[i]-last-1)*(hd+vsz*sizeof(short)),SEEK_CUR);if(DEBUG_VECST)printf("rdmanyDBB%ld",ftell(f));last=(int)ind[i];}r=fread(&n,sizeof(int),2,f);r=fread(&sf,sizeof(double),2,f);if(n[0]!=vsz){printf("rdmanyERRAvec(%d)%dvs%d\n",iflag?(int)ind[i]:i,vsz,n[0]);hxe();}if(n[1]!=code){printf("rdmanyERRBcodemismatch%d%d\n",n[1],code);hxe();}r=fread(xs,sizeof(short),n[0],f);for(j=0;j<vsz;j++)if(vflag){y[i*vsz+j]=(double)(xs[j]/sf[0]+sf[1]);}elsevvo[i][j]=(double)(xs[j]/sf[0]+sf[1]);}}elseif(code==3){float*xs;xs=(float*)scr;for(last=-1,i=0;i<num;i++){if(iflag){fseek(f,(long)((int)ind[i]-last-1)*(hd+vsz*sizeof(float)),SEEK_CUR);last=(int)ind[i];}if(DEBUG_VECST)printf("rdmanyDBC:%ld",ftell(f));r=fread(&n,sizeof(int),2,f);if(n[0]!=vsz){printf("rdmanyERRAvec(%d)%dvs%d\n",iflag?(int)ind[i]:i,vsz,n[0]);hxe();}if(n[1]!=code){printf("rdmanyERRBcodemismatch%d%d\n",n[1],code);hxe();}r=fread(xs,sizeof(float),n[0],f);for(j=0;j<n[0];j++)if(vflag){y[i*vsz+j]=(double)xs[j];}elsevvo[i][j]=(double)xs[j];}}elseif(code==4){double*xs;xs=(double*)scr;for(last=-1,i=0;i<num;i++){if(iflag){fseek(f,(long)((int)ind[i]-last-1)*(hd+vsz*sizeof(double)),SEEK_CUR);last=(int)ind[i];}if(DEBUG_VECST)printf("rdmanyDBD%ld",ftell(f));r=fread(&n,sizeof(int),2,f);if(n[0]!=vsz){printf("rdmanyERRAvec(%d)%dvs%d\n",iflag?(int)ind[i]:i,vsz,n[0]);hxe();}if(n[1]!=code){printf("rdmanyERRBcodemismatch%d%d\n",n[1],code);hxe();}r=fread(xs,sizeof(double),n[0],f);for(j=0;j<n[0];j++)if(vflag)y[i*vsz+j]=xs[j];elsevvo[i][j]=xs[j];}}elseprintf("rdmany()code%dnotimplemented\n",code);return(double)num;}ENDVERBATIMVERBATIMstaticdoublerdfile(void*vv){inti,j,k,ni,vsz,ty,ny,nv,num,cnt,n[2],hd,vflag;void*vnq[10000];size_tr;size_tsz;char*xc;int*xi;float*xf;double*xd;void*xv;unsignedshort*xus;Object*ob;double*vvo[10000],sf[2],*ind,*y;FILE*f;vflag=0;ni=vector_instance_px(vv,&ind);f=hoc_obj_file_arg(1);ob=*hoc_objgetarg(2);if(strncmp(hoc_object_name(ob),"Vector",6)==0)vflag=1;fseek(f,0,SEEK_END);sz=(int)ftell(f);rewind(f);if(DEBUG_VECST)printf("Size%d\n",sz);if(sz>scrsz*sizeof(int)){if(scrsz>0){free(scr);scr=(unsignedint*)NULL;}scr=(unsignedint*)ecalloc(1,sz);scrsz=sz/sizeof(int);}xc=(char*)scr;r=fread(xc,(size_t)sz,1,f);if(vflag){ny=vector_arg_px(2,&y);}else{num=ivoc_list_count(ob);if(num>10000){printf("rdfileERRA:canonlyhandle10000vectors");hxe();}for(i=0;i<num;i++){nv=list_vector_px3(ob,i,&vvo[i],&vnq[i]);if(i==0)vsz=nv;if(vsz!=nv){printf("rdfileERRC:Vectorsmustallbesamesize%d%d%d\n",i,vsz,nv);hxe();}}}for(i=0,k=0,cnt=0;i<sz;cnt++){xi=(int*)(xc+i);vsz=xi[0];ty=xi[1];i+=(2*sizeof(int));if(vsz<=0||ty<1||ty>5){printf("rdfileERRB:badsize/type:%d/%dinvec#%d\n",vsz,ty,cnt);hxe();}if(DEBUG_VECST)printf("%d:%d:%d",i,ty,vsz);if(vflag){if(k+vsz>=ny){printf("rdfileERRC:Nomoreroominvec:%d%d%d%d\n",ny,k+vsz,cnt,ty);hxe();}}else{if(cnt>=num){printf("rdfileERRD:outofvecs:%d%d%d\n",num,cnt,ty);hxe();}if(vsz>nv){printf("rdfileERRE:Nomoreroominvec:%d%d%d%d\n",nv,vsz,cnt,ty);hxe();}}if(ty==3){xf=(float*)(xc+i);if(vflag){for(j=0;j<vsz;j++)y[k+j]=(double)xf[j];k+=vsz;}else{for(j=0;j<vsz;j++)vvo[cnt][j]=(double)xf[j];vector_resize(vnq[cnt],vsz);}i+=(vsz*sizeof(float));}elseif(ty==4){xv=(void*)(xc+i);if(vflag){memcpy((void*)(y+k),xv,(size_t)(vsz*sizeof(double)));k+=vsz;}else{memcpy((void*)(&vvo[cnt][0]),xv,(size_t)(vsz*sizeof(double)));vector_resize(vnq[cnt],vsz);}i+=(vsz*sizeof(double));}elseif(ty==2){xd=(double*)(xc+i);i+=2*sizeof(double);for(j=0;j<2;j++)sf[j]=xd[j];xus=(unsignedshort*)(xc+i);if(vflag){for(j=0;j<vsz;j++)y[k+j]=((double)xus[j])/sf[0]+sf[1];k+=vsz;}else{for(j=0;j<vsz;j++)vvo[cnt][j]=((double)xus[j])/sf[0]+sf[1];vector_resize(vnq[cnt],vsz);}i+=(vsz*sizeof(short));}elseprintf("rdfile()type%dnotimplemented\n",ty);}if(vflag)vector_resize(vector_arg(2),k);if(scrsz>1e7){free(scr);scr=(unsignedint*)NULL;scrsz=0;}return(double)num;}ENDVERBATIMPROCEDUREinstall_vecst(){if(VECST_INSTALLED==1){printf("$Id}else{VECST_INSTALLED=1VERBATIM{inti,j;install_vector_method("indset",indset);install_vector_method("mkind",mkind);install_vector_method("circ",circ);install_vector_method("thresh",thresh);install_vector_method("triplet",triplet);install_vector_method("onoff",onoff);install_vector_method("bpeval",bpeval);install_vector_method("w",w);install_vector_method("whi",whi);install_vector_method("sedit",sedit);install_vector_method("xing",xing);install_vector_method("scxing",scxing);install_vector_method("cvlv",cvlv);install_vector_method("sccvlv",sccvlv);install_vector_method("scl",scl);install_vector_method("revec",revec);install_vector_method("has",has);install_vector_method("intrp",intrp);install_vector_method("xzero",xzero);install_vector_method("peak",peak);install_vector_method("negwrap",negwrap);install_vector_method("sw",sw);install_vector_method("ismono",ismono);install_vector_method("count",count);install_vector_method("muladd",muladd);install_vector_method("binfind",binfind);install_vector_method("unq",unq);install_vector_method("uniq",uniq);install_vector_method("rnd",rnd);install_vector_method("fewind",fewind);install_vector_method("findx",findx);install_vector_method("lma",lma);install_vector_method("sindx",sindx);install_vector_method("sindv",sindv);install_vector_method("nind",nind);install_vector_method("keyind",keyind);install_vector_method("slct",slct);install_vector_method("slor",slor);install_vector_method("insct",insct);install_vector_method("linsct",linsct);install_vector_method("cull",cull);install_vector_method("redundout",redundout);install_vector_method("mredundout",mredundout);install_vector_method("d2v",d2v);install_vector_method("v2d",v2d);install_vector_method("v2p",v2p);install_vector_method("l2p",l2p);install_vector_method("fetch",fetch);install_vector_method("covar",covar);install_vector_method("ixsort",ixsort);install_vector_method("vlxpose",vlxpose);install_vector_method("b2v",b2v);install_vector_method("iwr",iwr);install_vector_method("ird",ird);install_vector_method("smgs",smgs);install_vector_method("smsy",smsy);install_vector_method("ident",ident);install_vector_method("lcat",lcat);install_vector_method("snap",snap);install_vector_method("fread2",fread2);install_vector_method("vfill",vfill);install_vector_method("vrdh",vrdh);install_vector_method("mkcode",mkcode);install_vector_method("uncode",uncode);install_vector_method("sumabs",sumabs);install_vector_method("inv",inv);install_vector_method("join",join);install_vector_method("slone",slone);install_vector_method("pop",pop);install_vector_method("rdmany",rdmany);install_vector_method("rdfile",rdfile);install_vector_method("samp",samp);install_vector_method("nearest",nearest);install_vector_method("nearall",nearall);install_vector_method("approx",approx);install_vector_method("nqsvt",nqsvt);install_vector_method("roton",roton);for(i=0,j=5;i<=5;i++,j--)sc[i]=pow(2,10*j);}ENDVERBATIM}}FUNCTIONisojt(){VERBATIM{Object*ob1,*ob2;ob1=*hoc_objgetarg(1);ob2=*hoc_objgetarg(2);if(!ob1)if(!ob2)return1;elsereturn0;if(!ob2||ob1->template!=ob2->template){return0;}return1;}ENDVERBATIM}FUNCTIONisojn(){VERBATIM{Object*ob1;char*name;ob1=*hoc_objgetarg(1);name=gargstr(2);if(strncmp(hoc_object_name(ob1),name,3)==0)_lisojn=1.;else_lisojn=0.;}ENDVERBATIM}FUNCTIONojtnum(){VERBATIM{Object*ob1;charname[50];intii;ob1=*hoc_objgetarg(1);if(!ob1)return-1;if(ifarg(2)){strncpy(name,hoc_object_name(ob1),50);for(ii=strlen(name);ii>1;ii--)if(name[ii]==91){name[ii]=0;break;}hoc_assign_str(hoc_pgargstr(2),name);}return(double)ob1->index;}ENDVERBATIM}FUNCTIONeqojt(){VERBATIM{Object*ob1,*ob2;ob1=*hoc_objgetarg(1);ob2=*hoc_objgetarg(2);if(ob1&&ob2&&ob1==ob2){return1;}return0;}ENDVERBATIM}FUNCTIONbyteswap(){VERBATIM{intn[2];size_tr;doubleret;FILE*f;BYTEHEADERf=hoc_obj_file_arg(1);r=fread(&n,sizeof(int),2,f);if(n[1]<1||n[1]>5){BYTESWAP_FLAG=1;ret=1.;}elseret=0.;BYTESWAP(n[1],int)if(n[1]<1||n[1]>5){printf("byteswap:Somethingwrongwithlocationsampled:%d\n",n[1]);ret=-1.;}fseek(f,-2*sizeof(int),SEEK_CUR);returnret;}ENDVERBATIM}FUNCTIONmkcodf(){VERBATIM{inti;doublex,a;if(ifarg(6)){printf("mkcodf()ERR:canonlyencode5values\n");hxe();}for(x=0.,i=1;i<=5;i++){a=(ifarg(i))?*getarg(i):0.0;if(a<0.||a>=sc[4]||floor(a+0.5)!=a){printf("mkcodfrestrictedtointegers%g[0,%g]\n",a,sc[4]-1);hxe();}x+=a*sc[i];}returnx;}ENDVERBATIM}FUNCTIONuncodf(){VERBATIM{inti;doublex,ret,*ptr;x=*getarg(1);if(hoc_is_double_arg(2)){i=(int)*getarg(2);if(i<1||i>5){printf("2ndargmustbefield#1-5(%d)\n",i);hxe();}UNCODE(x,i,ret);returnret;}else{for(i=2;i<=6;i++)if(ifarg(i)){ptr=hoc_pgetarg(i);UNCODE(x,i-1,*ptr);}elsebreak;return*ptr;}}ENDVERBATIM}FUNCTIONrecodf(){VERBATIM{inti;doublex,y,old;i=(int)chkarg(1,1.,5.);x=*getarg(2);y=chkarg(3,0.,sc[4]-1);UNCODE(x,i,old);returnx+sc[i]*(y-old);}ENDVERBATIM}FUNCTIONflor(){VERBATIM{returnfloor(*getarg(1));}ENDVERBATIM}FUNCTIONceilg(){VERBATIM{returnceil(*getarg(1));}ENDVERBATIM}FUNCTIONMINxy(){VERBATIM{returnMIN(*getarg(1),*getarg(2));}ENDVERBATIM}FUNCTIONMAXxy(){VERBATIM{returnMAX(*getarg(1),*getarg(2));}ENDVERBATIM}PROCEDUREfspitchar(c){VERBATIM{FILE*f;f=hoc_obj_file_arg(2);fprintf(f,"%c",(int)_lc);}ENDVERBATIM}FUNCTIONfgchar(){VERBATIM{FILE*f;f=hoc_obj_file_arg(1);_lfgchar=(double)fgetc(f);}ENDVERBATIM}FUNCTIONStr2Num(){VERBATIM{doubled;char*c;c=gargstr(1);d=atof(c);returnd;}ENDVERBATIM}FUNCTIONvlsz(){VERBATIM{inti,j,c,n;double*x,sz,fill;void*vv;ListVec*pL;Object*obl;pL=AllocListVec(obl=*hoc_objgetarg(1));sz=*getarg(2);if(ifarg(3))fill=*getarg(3);elsefill=OK;c=pL->isz;for(i=0;i<c;i++){pL->pv[i]=list_vector_resize(obl,i,(int)sz);if(fill!=OK)for(j=0;j<(int)sz;j++)pL->pv[i][j]=fill;}FreeListVec(&pL);_lvlsz=(double)sz*c;}ENDVERBATIM}VERBATIMvoidFreeListVec(ListVec**pp){ListVec*p=*pp;if(p->pv){free(p->pv);p->pv=0;}if(p->plen){free(p->plen);p->plen=0;}free(p);*pp=0;}ListVec*AllocListVec(Object*p){inti,iSz;ListVec*pList;Object*obv;if(!IsList(p)){printf("AllocListVecERRA:argmustbelistobject!\n");hxe();}pList=(ListVec*)malloc(sizeof(ListVec));if(!pList)hxe();pList->pL=p;pList->isz=0;pList->pv=0;pList->plen=0;iSz=pList->isz=ivoc_list_count(p);if(iSz<1)returnpList;pList->plen=(unsignedint*)malloc(sizeof(int)*iSz);if(!pList->plen){printf("AllocListVecERRB:Outofmemory!\n");hxe();}pList->pbuflen=(unsignedint*)malloc(sizeof(int)*iSz);pList->pv=(double**)malloc(sizeof(double*)*iSz);if(!pList->pv){free(pList->plen);printf("AllocListVecERRC:Outofmemory!\n");hxe();}for(i=0;i<pList->isz;i++){obv=ivoc_list_item(p,i);pList->pv[i]=vector_vec(obv->u.this_pointer);pList->plen[i]=vector_capacity(obv->u.this_pointer);pList->pbuflen[i]=vector_buffer_size(obv->u.this_pointer);;}returnpList;}ListVec*AllocILV(Object*p,intnx,double*x){inti,j,iSz,ilc;ListVec*pList;Object*obv;if(!IsList(p)){printf("AllocILVERRA:argmustbelistobject!\n");hxe();}pList=(ListVec*)malloc(sizeof(ListVec));if(!pList)hxe();pList->pL=p;iSz=pList->isz=nx;pList->pv=0;pList->plen=0;ilc=ivoc_list_count(p);if(iSz<1)returnpList;pList->plen=(unsignedint*)malloc(sizeof(int)*iSz);if(!pList->plen){printf("AllocILVERRB:Outofmemory!\n");hxe();}pList->pbuflen=(unsignedint*)malloc(sizeof(int)*iSz);pList->pv=(double**)malloc(sizeof(double*)*iSz);if(!pList->pv){free(pList->plen);printf("AllocILVERRC:Outofmemory!\n");hxe();}for(i=0;i<iSz;i++){if((j=(int)x[i])>=ilc){printf("AllocILVERRD:indexOOB:%d>=%d\n",j,ilc);hxe();}obv=ivoc_list_item(p,j);pList->pv[i]=vector_vec(obv->u.this_pointer);pList->plen[i]=vector_capacity(obv->u.this_pointer);pList->pbuflen[i]=vector_buffer_size(obv->u.this_pointer);;}returnpList;}voidListVecResize(ListVec*p,intnewsz){inti,j;Object*obv;for(i=0;i<p->isz;i++){obv=ivoc_list_item(p->pL,i);p->pv[i]=vector_newsize(obv->u.this_pointer,newsz);p->plen[i]=newsz;}}voidFillListVec(ListVec*p,doubledval){inti,j;for(i=0;i<p->isz;i++){for(j=0;j<p->plen[i];j++){p->pv[i][j]=dval;}}}intIsObj(Object*p,char*s){if(!p)return0;if(!s||!strlen(s))return0;return!strncmp(hoc_object_name(p),s,strlen(s));}intIsVector(Object*p){returnIsObj(p,"Vector");}intIsList(Object*p){returnIsObj(p,"List");}int**getint2D(introws,intcols){int**pp,*pool,*curPtr;inti;pp=(int**)malloc(sizeof(int*)*rows);if(!pp){printf("ERR:outofmemory!\n");return0x0;}pool=(int*)malloc(sizeof(int)*rows*cols);if(!pool){printf("ERR:outofmemory!\n");free(pp);return0x0;}curPtr=pool;for(i=0;i<rows;i++){pp[i]=curPtr;curPtr+=cols;}returnpp;}voidfreeint2D(int***ppp,introws){int**pp;pp=*ppp;free(pp[0]);free(pp);*ppp=0;}double**getdouble2D(introws,intcols){double**pp,*pool,*curPtr;inti;pp=(double**)malloc(sizeof(double*)*rows);if(!pp){printf("ERR:outofmemory!\n");return0x0;}pool=(double*)malloc(sizeof(double)*rows*cols);if(!pool){printf("ERR:outofmemory!\n");free(pp);return0x0;}curPtr=pool;for(i=0;i<rows;i++){pp[i]=curPtr;curPtr+=cols;}returnpp;}voidfreedouble2D(double***ppp,introws){double**pp;pp=*ppp;free(pp[0]);free(pp);*ppp=0;}ENDVERBATIM