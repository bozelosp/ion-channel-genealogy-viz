NEURON{SUFFIXnothingGLOBALBVBASE,RES,VECST_INSTALLED}PARAMETER{BVBASE=-1.VECST_INSTALLED=0ERR=-1.3479e121ALL=-1.3479e120NEG=-1.3478e120POS=-1.3477e120CHK=-1.3476e120NOZ=-1.3475e120GTH=-1.3474e120GTE=-1.3473e120LTH=-1.3472e120LTE=-1.3471e120EQU=-1.3470e120EQV=-1.3469e120EQW=-1.3468e120NEQ=-1.3467e120SEQ=-1.3466e120RXP=-1.3465e120IBE=-1.3464e120EBI=-1.3463e120IBI=-1.3462e120EBE=-1.3461e120}ASSIGNED{RES}VERBATIM#include<stdlib.h>#include<math.h>#include<values.h>#include<sys/time.h>externdouble*hoc_pgetarg();externdoublehoc_call_func(Symbol*,intnarg);externFILE*hoc_obj_file_arg(intnarg);externObject**hoc_objgetarg();externvoidvector_resize();externintvector_instance_px();externvoid*vector_arg();externdouble*vector_vec();externdoublehoc_epsilon;externvoidset_seed();externintivoc_list_count(Object*);externObject*ivoc_list_item(Object*,int);staticintlist_vector_px();staticintlist_vector_px2();staticintlist_vector_resize();typedefstructBVEC{intsize;intbufsize;short*x;Object*o;}bvec;ENDVERBATIMVERBATIMstaticdoubleslope(void*vv){inti,n;double*x,*y;doubletimestep,sigxy,sigx,sigy,sigx2;n=vector_instance_px(vv,&y);if(ifarg(1)){timestep=*getarg(1);}else{printf("Youmustsupplyatimestep\n");return0;}sigxy=sigx=sigy=sigx2=0;x=(double*)malloc(sizeof(double)*n);for(i=0;i<n;i++){x[i]=timestep*i;sigxy+=x[i]*y[i];sigx+=x[i];sigy+=y[i];sigx2+=x[i]*x[i];}return(n*sigxy-sigx*sigy)/(n*sigx2-sigx*sigx);}ENDVERBATIMVERBATIMstaticdoublevslope(void*vv){inti,n;double*x,*y;doubletimestep,sigxy,sigx,sigy,sigx2;n=vector_instance_px(vv,&y);if(ifarg(1)){if(vector_arg_px(1,&x)!=n){hoc_execerror("Vectorsizedoesn'tmatch.",0);}sigxy=sigx=sigy=sigx2=0;for(i=0;i<n;i++){sigxy+=x[i]*y[i];sigx+=x[i];sigy+=y[i];sigx2+=x[i]*x[i];}}return(n*sigxy-sigx*sigy)/(n*sigx2-sigx*sigx);}ENDVERBATIMVERBATIMstaticdoublestats(void*vv){inti,n;double*x,*y;doubletimestep,sigxy,sigx,sigy,sigx2,sigy2;doubler,m,b;n=vector_instance_px(vv,&y);if(ifarg(1)){timestep=*getarg(1);}else{printf("Youmustsupplyatimestep\n");return0;}sigxy=sigx=sigy=sigx2=sigy2=0;x=(double*)malloc(sizeof(double)*n);for(i=0;i<n;i++){x[i]=timestep*i;sigxy+=x[i]*y[i];sigx+=x[i];sigy+=y[i];sigx2+=x[i]*x[i];sigy2+=y[i]*y[i];}m=(n*sigxy-sigx*sigy)/(n*sigx2-sigx*sigx);b=(sigy*sigx2-sigx*sigxy)/(n*sigx2-sigx*sigx);r=(n*sigxy-sigx*sigy)/(sqrt(n*sigx2-sigx*sigx)*sqrt(n*sigy2-sigy*sigy));printf("Examined%ddatapoints\n",n);printf("slope=%f\n",m);printf("intercept=%f\n",b);printf("R=%f\n",r);printf("R-squared=%f\n",r*r);return1;}ENDVERBATIMVERBATIMstaticdoublevstats(void*vv){inti,n;double*x,*y;doubletimestep,sigxy,sigx,sigy,sigx2,sigy2;doubler,m,b;n=vector_instance_px(vv,&y);if(ifarg(1)){if(vector_arg_px(1,&x)!=n){hoc_execerror("Vectorsizedoesn'tmatch.",0);}sigxy=sigx=sigy=sigx2=sigy2=0;for(i=0;i<n;i++){sigxy+=x[i]*y[i];sigx+=x[i];sigy+=y[i];sigx2+=x[i]*x[i];sigy2+=y[i]*y[i];}m=(n*sigxy-sigx*sigy)/(n*sigx2-sigx*sigx);b=(sigy*sigx2-sigx*sigxy)/(n*sigx2-sigx*sigx);r=(n*sigxy-sigx*sigy)/(sqrt(n*sigx2-sigx*sigx)*sqrt(n*sigy2-sigy*sigy));printf("Examined%ddatapoints\n",n);printf("slope=%f\n",m);printf("intercept=%f\n",b);printf("R=%f\n",r);printf("R-squared=%f\n",r*r);return1;}else{printf("Youmustsupplyanxvector!\n");return0;}}ENDVERBATIMVERBATIMstaticdoublerandwd(void*vv){inti,ii,jj,nx,ny,flip,flag;double*x,*y;nx=vector_instance_px(vv,&x);flip=(int)*getarg(1);if(ifarg(2)){flag=1;ny=vector_arg_px(2,&y);if(ny!=flip){hoc_execerror("Optvectormustbesizefor#offlips",0);}}else{flag=0;}if(flip>=nx){hoc_execerror("#offlipsexceeds(or==)vectorsize",0);}for(i=0;i<nx;i++){x[i]=BVBASE;}for(i=0,jj=0;i<flip;i++){ii=(int)((nx+1)*drand48());if(x[ii]==BVBASE){x[ii]=1.;if(flag){y[jj]=ii;jj++;}}else{i--;}}returnflip;}ENDVERBATIMVERBATIMstaticdoublehamming(void*vv){inti,nx,ny,nz,prflag;double*x,*y,*z,sum;sum=0.;nx=vector_instance_px(vv,&x);ny=vector_arg_px(1,&y);if(ifarg(2)){prflag=1;nz=vector_arg_px(2,&z);}else{prflag=0;}if(nx!=ny||(prflag&&nx!=nz)){hoc_execerror("Vectorsmustbesamesize",0);}for(i=0;i<nx;++i){if(x[i]!=y[i]){sum++;if(prflag){z[i]=1.;}}elseif(prflag){z[i]=0.;}}returnsum;}ENDVERBATIMVERBATIMstaticdoubleinfo(void*vv){intnx,bsz;double*x;nx=vector_instance_px(vv,&x);bsz=vector_buffer_size(vv);printf("Obj*%xDbl*%xSize:%dBufsize:%d\n",vv,x,nx,bsz);}ENDVERBATIMVERBATIMstaticdoubleindset(void*vv){inti,nx,ny,nz,flag;double*x,*y,*z,val,val2;nx=vector_instance_px(vv,&x);ny=vector_arg_px(1,&y);if(hoc_is_object_arg(2)){flag=1;nz=vector_arg_px(2,&z);if(ny!=nz){hoc_execerror("v.indset:Vectorsizesdon'tmatch.",0);}}else{flag=0;val=*getarg(2);}if(ifarg(3)){val2=*getarg(3);for(i=0;i<nx;i++){x[i]=val2;}}for(i=0;i<ny;i++){if(y[i]>nx){hoc_execerror("v.indset:Indexexceedsvectorsize",0);}if(flag)x[(int)y[i]]=z[i];elsex[(int)y[i]]=val;}returni;}ENDVERBATIMVERBATIMstaticintscrsz=0;staticint*scr;staticdoubledcr[100];ENDVERBATIMVERBATIMstaticdoublefewind(void*vv){inti,j,nx,ni,nv[10],num;Object*ob;double*x,*ind,*vvo[10];nx=vector_instance_px(vv,&x);ni=vector_arg_px(1,&ind);ob=*hoc_objgetarg(2);num=ivoc_list_count(ob);if(num>10)hoc_execerror("ERR:fewindcanonlyhandle10vectors",0);for(i=0;i<num;i++){nv[i]=list_vector_px(ob,i,&vvo[i]);if(nx!=nv[i]){printf("fewindERR%d%d%d\n",i,nx,nv[i]);hoc_execerror("Vectorsmustallbesamesize:",0);}}if(ni>scrsz){if(scrsz>0){free(scr);scr=(int*)NULL;}scrsz=ni+10000;scr=(int*)ecalloc(scrsz,sizeof(int));}for(i=0;i<ni;i++){scr[i]=(int)ind[i];if(scr[i]>=nx||scr[i]<0){printf("fewindERR1%d%d\n",scr[i],nx);hoc_execerror("Indexvectorout-of-bounds",0);}}for(j=0;j<num;j++){for(i=0;i<ni;i++)x[i]=vvo[j][scr[i]];for(i=0;i<ni;i++)vvo[j][i]=x[i];list_vector_resize(ob,j,ni);}returnni;}ENDVERBATIMVERBATIMstaticdoublefindx(void*vv){inti,j,ni,nx,av[11],bv[11],num;Object*ob1,*ob2;double*ind,*avo[11],*bvo[11];ni=vector_instance_px(vv,&ind);ob1=*hoc_objgetarg(1);ob2=*hoc_objgetarg(2);num=ivoc_list_count(ob1);i=ivoc_list_count(ob2);if(i!=num)hoc_execerror("findx****ERRA****:listshavedifferentcounts",0);if(num>11)hoc_execerror("findx****ERRB****:canonlyhandle11vectors",0);for(i=0;i<num;i++){av[i]=list_vector_px(ob1,i,&avo[i]);if(av[0]!=av[i]){printf("findx****ERRC****%d%d%d\n",i,av[0],av[i]);hoc_execerror("Srcvectorsmustallbesamesize:",0);}}nx=av[0];for(i=0;i<num;i++){bv[i]=list_vector_px2(ob2,i,&bvo[i],&vv);if(vector_buffer_size(vv)<ni){printf("findx****ERRD****arg#%dneed:%dsz:%d\n",num+i+1,ni,vector_buffer_size(vv));hoc_execerror("Destinationvectorwithinsufficientsize:",0);}else{vector_resize(vv,ni);}}if(ni>scrsz){if(scrsz>0){free(scr);scr=(int*)NULL;}scrsz=ni+10000;scr=(int*)ecalloc(scrsz,sizeof(int));}for(i=0;i<ni;i++){scr[i]=(int)ind[i];if(scr[i]>=nx||scr[i]<0){printf("findx****ERRE********IND:%dSZ:%d\n",scr[i],nx);hoc_execerror("Indexvectorout-of-bounds",0);}}for(j=0,i=0;j<num;j++)for(i=0;i<ni;i++)bvo[j][i]=avo[j][scr[i]];returnni;}ENDVERBATIMVERBATIMstaticdoublesindx(void*vv){inti,j,ni,nx,av[11],bv[11],num;Object*ob1,*ob2;double*ind,*avo[11],*bvo[11];ni=vector_instance_px(vv,&ind);ob1=*hoc_objgetarg(1);ob2=*hoc_objgetarg(2);num=ivoc_list_count(ob1);i=ivoc_list_count(ob2);if(num!=i)hoc_execerror("sindx****ERRA****:twoveclistshavedifferentcounts",0);if(num>11)hoc_execerror("sindx****ERRB****:canonlyhandle11vectors",0);for(i=0;i<num;i++){av[i]=list_vector_px(ob1,i,&avo[i]);if(av[0]!=av[i]){printf("sindx****ERRC****%d%d%d\n",i,av[0],av[i]);hoc_execerror("Dest.vectorsmustallbesamesize:",0);}}nx=av[0];for(i=0;i<num;i++){bv[i]=list_vector_px(ob2,i,&bvo[i]);if(bv[i]!=ni){printf("sindx****ERRD****arg#%ddoesnotematchindlength%dvs%d\n",num+i+1,ni,bv[i]);hoc_execerror("Sourcevectorwithinsufficientsize:",0);}}if(ni>scrsz){if(scrsz>0){free(scr);scr=(int*)NULL;}scrsz=ni+10000;scr=(int*)ecalloc(scrsz,sizeof(int));}for(i=0;i<ni;i++){scr[i]=(int)ind[i];if(scr[i]>=nx||scr[i]<0){printf("sindx****ERRE****IND:%dSZ:%d\n",scr[i],nx);hoc_execerror("Indexvectorout-of-bounds",0);}}for(j=0,i=0;j<num;j++)for(i=0;i<ni;i++)avo[j][scr[i]]=bvo[j][i];returnni;}ENDVERBATIMVERBATIMstaticdoublesindv(void*vv){inti,j,ni,nx,av[11],bv,num;Object*ob;double*ind,*avo[11],*bvo;ni=vector_instance_px(vv,&ind);ob=*hoc_objgetarg(1);bv=vector_arg_px(2,&bvo);num=ivoc_list_count(ob);if(num>11)hoc_execerror("sindv****ERRA****:canonlyhandle11vectors",0);for(i=0;i<num;i++){av[i]=list_vector_px(ob,i,&avo[i]);if(av[0]!=av[i]){printf("sindv****ERRC****%d%d%d\n",i,av[0],av[i]);hoc_execerror("Dest.vectorsmustallbesamesize:",0);}}nx=av[0];if(bv!=num){printf("sindv****ERRD****Vectorargdoesnotematchlistcount%dvs%d\n",num,bv);hoc_execerror("Sourcevectoriswrongsize:",0);}if(ni>scrsz){if(scrsz>0){free(scr);scr=(int*)NULL;}scrsz=ni+10000;scr=(int*)ecalloc(scrsz,sizeof(int));}for(i=0;i<ni;i++){scr[i]=(int)ind[i];if(scr[i]>=nx||scr[i]<0){printf("sindv****ERRE****IND:%dSZ:%d\n",scr[i],nx);hoc_execerror("Indexvectorout-of-bounds",0);}}for(j=0,i=0;j<num;j++)for(i=0;i<ni;i++)avo[j][scr[i]]=bvo[j];returnni;}ENDVERBATIMVERBATIMstaticdoubleslct(void*vv){inti,j,k,m,n,p,ni,nk,na,nv[10],num,fl,lc;Object*lob;double*ind,*key,*arg,*vvo[10];ni=vector_instance_px(vv,&ind);nk=vector_arg_px(1,&key);na=vector_arg_px(2,&arg);lob=*hoc_objgetarg(3);num=ivoc_list_count(lob);if(num>10)hoc_execerror("ERR:vecst::slctcanonlyhandle10vectors",0);for(i=0,j=0,k=0;i<num;i++,j++){nv[i]=list_vector_px(lob,i,&vvo[i]);if(ni!=nv[i]&&(key[j]!=EQW||k!=1)){printf("vecst::slctERR%d%d%d%d%d\n",i,j,k,ni,nv[i]);hoc_execerror("indexandsearchedvectorsmustallbesamesize:",0);}if(key[j]==EQW||key[j]==EQV)if(k==0){j--;k++;}elsek=0;}if(2*nk!=na){printf("vecst::slctERR3%d%d\n",nk,na);hoc_execerror("Argvectormustbedoublekeylength",0);}for(i=0,n=0;i<nk;i++)if(key[i]==EQV||key[i]==EQW)n++;if(nk+n!=num){printf("vecst::slctERR2%d(keys)+%d(EQV/W)!=%d(vecs)\n",nk,n,num);hoc_execerror("Keylengthmustbenumberofvecs+numofEQV/W",0);}for(j=0,k=0,m=0;j<ni;j++){for(i=0,m=0,n=0,fl=1;i<num;i++,n++,m+=2){if(key[n]==ALL)continue;if(key[n]==NOZ){if(vvo[i][j]==0.){fl=0;break;}elsecontinue;}elseif(key[n]==POS){if(vvo[i][j]<=0.){fl=0;break;}elsecontinue;}elseif(key[n]==NEG){if(vvo[i][j]>=0.){fl=0;break;}elsecontinue;}elseif(key[n]==GTH){if(vvo[i][j]<=arg[m]){fl=0;break;}elsecontinue;}elseif(key[n]==GTE){if(vvo[i][j]<arg[m]){fl=0;break;}elsecontinue;}elseif(key[n]==LTH){if(vvo[i][j]>=arg[m]){fl=0;break;}elsecontinue;}elseif(key[n]==LTE){if(vvo[i][j]>arg[m]){fl=0;break;}elsecontinue;}elseif(key[n]==EQU){if(vvo[i][j]!=arg[m]){fl=0;break;}elsecontinue;}elseif(key[n]==EQV){if(vvo[i][j]!=vvo[i+1][j]){fl=0;break;}else{i++;continue;}}elseif(key[n]==EQW){fl=0;for(p=0;p<nv[i+1];p++)if(vvo[i][j]==vvo[i+1][p]){fl=1;break;}if(fl==0)break;else{i++;continue;}}elseif(key[n]==NEQ){if(vvo[i][j]==arg[m]){fl=0;break;}elsecontinue;}elseif(key[n]==IBE){if((vvo[i][j]<arg[m])||(vvo[i][j]>=arg[m+1])){fl=0;break;}elsecontinue;}elseif(key[n]==EBI){if((vvo[i][j]<=arg[m])||(vvo[i][j]>arg[m+1])){fl=0;break;}elsecontinue;}elseif(key[n]==IBI){if((vvo[i][j]<arg[m])||(vvo[i][j]>arg[m+1])){fl=0;break;}elsecontinue;}elseif(key[n]==EBE){if((vvo[i][j]<=arg[m])||(vvo[i][j]>=arg[m+1])){fl=0;break;}elsecontinue;}else{printf("vecst::slctERR4%g\n",key[n]);hoc_execerror("Unknownkey",0);}}if(fl)ind[k++]=j;}vector_resize(vv,k);returnk;}ENDVERBATIMVERBATIMstaticdoubleslor(void*vv){inti,j,k,m,n,p,ni,nk,na,nv[10],num,fl;Object*lob;double*ind,*key,*arg,*vvo[10];ni=vector_instance_px(vv,&ind);nk=vector_arg_px(1,&key);na=vector_arg_px(2,&arg);lob=*hoc_objgetarg(3);num=ivoc_list_count(lob);if(num>10)hoc_execerror("ERR:vecst::slorcanonlyhandle10vectors",0);for(i=0,j=0,k=0;i<num;i++,j++){nv[i]=list_vector_px(lob,i,&vvo[i]);if(ni!=nv[i]&&(key[j]!=EQW||k!=1)){printf("vecst::slctERR%d%d%d%d%d\n",i,j,k,ni,nv[i]);hoc_execerror("indexandsearchedvectorsmustallbesamesize:",0);}if(key[j]==EQW||key[j]==EQV)if(k==0){j--;k++;}elsek=0;}if(2*nk!=na){printf("vecst::slorERR3%d%d\n",nk,na);hoc_execerror("Argvectormustbedoublekeylength",0);}for(i=0,n=0;i<nk;i++)if(key[i]==EQV||key[i]==EQW)n++;if(nk+n!=num){printf("vecst::slorERR2%d(keys)+%d(EQV)!=%d(vecs)\n",nk,n,num);hoc_execerror("Keylengthmustbenumberofvecs+numofEQV",0);}for(j=0,k=0,m=0;j<ni;j++){for(i=0,m=0,n=0,fl=0;i<num;i++,n++,m+=2){if(key[n]==ALL){fl=1;break;}if(key[n]==NOZ){if(vvo[i][j]==0.)continue;else{fl=1;break;}}elseif(key[n]==POS){if(vvo[i][j]<=0.)continue;else{fl=1;break;}}elseif(key[n]==NEG){if(vvo[i][j]>=0.)continue;else{fl=1;break;}}elseif(key[n]==GTH){if(vvo[i][j]<=arg[m])continue;else{fl=1;break;}}elseif(key[n]==GTE){if(vvo[i][j]<arg[m])continue;else{fl=1;break;}}elseif(key[n]==LTH){if(vvo[i][j]>=arg[m])continue;else{fl=1;break;}}elseif(key[n]==LTE){if(vvo[i][j]>arg[m])continue;else{fl=1;break;}}elseif(key[n]==EQU){if(vvo[i][j]!=arg[m])continue;else{fl=1;break;}}elseif(key[n]==EQV){if(vvo[i][j]!=vvo[i+1][j])continue;else{i++;fl=1;break;}}elseif(key[n]==EQW){fl=0;for(p=0;p<nv[i+1];p++)if(vvo[i][j]==vvo[i+1][p]){fl=1;break;}if(fl==1)break;else{i++;continue;}}elseif(key[n]==NEQ){if(vvo[i][j]==arg[m])continue;else{fl=1;break;}}elseif(key[n]==IBE){if((vvo[i][j]<arg[m])||(vvo[i][j]>=arg[m+1])){continue;}else{fl=1;break;}}elseif(key[n]==EBI){if((vvo[i][j]<=arg[m])||(vvo[i][j]>arg[m+1])){continue;}else{fl=1;break;}}elseif(key[n]==IBI){if((vvo[i][j]<arg[m])||(vvo[i][j]>arg[m+1])){continue;}else{fl=1;break;}}elseif(key[n]==EBE){if((vvo[i][j]<=arg[m])||(vvo[i][j]>=arg[m+1])){continue;}else{fl=1;break;}}else{printf("vecst::slorERR4%g\n",key[n]);hoc_execerror("Unknownkey",0);}}if(fl)ind[k++]=j;}vector_resize(vv,k);returnk;}ENDVERBATIMVERBATIMstaticdoubleiwr(void*vv){inti,j,nx;double*x;FILE*f,*hoc_obj_file_arg();f=hoc_obj_file_arg(1);nx=vector_instance_px(vv,&x);if(nx>scrsz){if(scrsz>0){free(scr);scr=(int*)NULL;}scrsz=nx+10000;scr=(int*)ecalloc(scrsz,sizeof(int));}for(i=0;i<nx;i++)scr[i]=(int)x[i];fwrite(&nx,sizeof(int),1,f);fwrite(scr,sizeof(int),nx,f);returnnx;}ENDVERBATIMVERBATIMstaticdoubleird(void*vv){inti,j,nx,n;double*x;FILE*f,*hoc_obj_file_arg();f=hoc_obj_file_arg(1);nx=vector_instance_px(vv,&x);fread(&n,sizeof(int),1,f);if(n>scrsz){if(scrsz>0){free(scr);scr=(int*)NULL;}scrsz=n+10000;scr=(int*)ecalloc(scrsz,sizeof(int));}if(n!=nx){nx=vector_buffer_size(vv);if(n<=nx){vector_resize(vv,n);nx=n;}else{printf("%d>%d::",n,nx);hoc_execerror("Vectormaxcapacitytoosmallforird",0);}}fread(scr,sizeof(int),n,f);for(i=0;i<nx;i++)x[i]=(double)scr[i];returnn;}ENDVERBATIMVERBATIMstaticdoubleinsct(void*vv){inti,j,k,nx,nv1,nv2,maxsz;double*x,*v1,*v2;nx=vector_instance_px(vv,&x);maxsz=vector_buffer_size(vv);vector_resize(vv,maxsz);nv1=vector_arg_px(1,&v1);nv2=vector_arg_px(2,&v2);for(i=0,k=0;i<nv1;i++)for(j=0;j<nv2;j++)if(v1[i]==v2[j]){if(k<maxsz){x[k++]=v1[i];}else{k++;}}if(k>maxsz){printf("\tinsctWARNING:ranoutofroom:%d<%d\n",maxsz,k);}else{vector_resize(vv,k);}return(double)k;}ENDVERBATIMVERBATIMstaticdoublecull(void*vv){inti,j,k,nx,nv1,nv2,maxsz,flag;double*x,*v1,*v2;nx=vector_instance_px(vv,&x);maxsz=vector_buffer_size(vv);vector_resize(vv,maxsz);nv1=vector_arg_px(1,&v1);nv2=vector_arg_px(2,&v2);for(i=0,k=0;i<nv1;i++){flag=1;for(j=0;j<nv2;j++)if(v1[i]==v2[j])flag=0;if(flag){if(k<maxsz){x[k++]=v1[i];}else{k++;}}}if(k>maxsz){printf("\tcullWARNING:ranoutofroom:%d<%d\n",maxsz,k);}else{vector_resize(vv,k);}return(double)k;}ENDVERBATIMVERBATIMstaticdoubleredundout(void*vv){inti,j,nx,nv1,maxsz,indflag;double*x,*v1,val;if(ifarg(2))indflag=1;elseindflag=0;nx=vector_instance_px(vv,&x);maxsz=vector_buffer_size(vv);vector_resize(vv,maxsz);nv1=vector_arg_px(1,&v1);val=v1[0];x[0]=(indflag?0:val);for(j=1,i=1;i<nv1&&j<maxsz;i++)if(v1[i]!=val){val=v1[i];x[j++]=(indflag?i:val);}if(j==maxsz){printf("\tredundoutWARNING:ranoutofroom:%d<needed\n",maxsz);}else{vector_resize(vv,j);}return(double)j;}ENDVERBATIMVERBATIMstaticdoublecvlv(void*vv){inti,j,k,nx,nsrc,nfilt;double*x,*src,*filt,sum,lpad,rpad;nx=vector_instance_px(vv,&x);nsrc=vector_arg_px(1,&src);nfilt=vector_arg_px(2,&filt);if(nx!=nsrc){hoc_execerror("Vectorsnotsamesize:",0);}if(nfilt>nsrc){hoc_execerror("Filterbiggerthansource",0);}for(i=0;i<nx;i++){x[i]=0.0;for(j=0,k=i-(int)(nfilt/2);j<nfilt;j++,k++){if(k>0&&k<nsrc-1)x[i]+=filt[j]*src[k];}}}ENDVERBATIMVERBATIMstaticdoubleintrp(void*vv){inti,la,lb,nx;double*x,fl,a,b;nx=vector_instance_px(vv,&x);fl=*getarg(1);i=0;a=x[0];la=0;if(a==fl)a=0;while(i<nx-1){for(i=la+1;x[i]==fl&&i<nx-1;i++);b=x[i];lb=i;for(i=la+1;i<lb;i++)x[i]=a+(b-a)/(lb-la)*(i-la);a=b;la=lb;}}ENDVERBATIMVERBATIMstaticdoublenind(void*vv){inti,j,k,m,nx,ni,nv[10],num,c,last;double*x,*ind,*vvo[10];nx=vector_instance_px(vv,&x);for(i=0;ifarg(i);i++);if(i>9)hoc_execerror("ERR:nindcanonlyhandle9vectors",0);num=i-2;for(i=0;i<num;i++){nv[i]=vector_arg_px(i+2,&vvo[i]);if(nx!=nv[i]){printf("nindERR%d%d%d\n",i,nx,nv[i]);hoc_execerror("Vectorsmustallbesamesize:",0);}}ni=vector_arg_px(1,&ind);c=nx-ni;if(ni>scrsz){if(scrsz>0){free(scr);scr=(int*)NULL;}scrsz=ni+10000;scr=(int*)ecalloc(scrsz,sizeof(int));}for(i=0,last=-1;i<ni;i++){scr[i]=(int)ind[i];if(scr[i]<0||scr[i]>=nx)hoc_execerror("nind():Indexoutofbounds",0);if(scr[i]<=last)hoc_execerror("nind():indicesshouldmonoincrease",0);last=scr[i];}for(j=0;j<num;j++){for(i=0,last=-1,m=0;i<ni;i++){for(k=last+1;k<scr[i];k++){x[m++]=vvo[j][k];}last=scr[i];}for(k=last+1;k<nx;k++,m++){x[m]=vvo[j][k];}for(i=0;i<c;i++)vvo[j][i]=x[i];vv=vector_arg(j+2);vector_resize(vv,c);}returnc;}ENDVERBATIMVERBATIMstaticdoublekeyind(void*vv){inti,j,k,ni,nk,nv[10],num;double*ind,*key,*vvo[10];ni=vector_instance_px(vv,&ind);for(i=0;ifarg(i);i++);i--;if(i>10)hoc_execerror("ERR:keyindcanonlyhandle9vectors",0);num=i-1;for(i=0;i<num;i++){nv[i]=vector_arg_px(i+2,&vvo[i]);if(ni!=nv[i]){printf("keyindERR%d%d%d\n",i,ni,nv[i]);hoc_execerror("Non-keyvectorsmustbesamesize:",0);}}nk=vector_arg_px(1,&key);if(nk!=num){printf("keyindERR2%d%d\n",nk,num);hoc_execerror("Keylengthmustbenumberofvecs",0);}k=0;for(j=0;j<ni;j++){for(i=0;i<nk;i++){if(key[i]==ALL)continue;if(key[i]==NOZ){if(vvo[i][j]==0.)break;elsecontinue;}elseif(key[i]==POS){if(vvo[i][j]<=0.)break;elsecontinue;}elseif(key[i]==NEG){if(vvo[i][j]>=0.)break;elsecontinue;}elseif(key[i]!=vvo[i][j])break;}if(i==nk)ind[k++]=j;}vector_resize(vv,k);returnk;}ENDVERBATIMVERBATIMstaticdoubleflipbits(void*vv){inti,nx,ny,flip,ii;double*x,*y;nx=vector_instance_px(vv,&x);ny=vector_arg_px(1,&y);flip=(int)*getarg(2);if(nx!=ny){hoc_execerror("Scratchvectormustbesamesize",0);}for(i=0;i<nx;i++){y[i]=x[i];}for(i=0;i<flip;i++){ii=(int)((nx+1)*drand48());if(x[ii]==y[ii]){x[ii]=((x[ii]==1.)?BVBASE:1.);}else{i--;}}returnflip;}ENDVERBATIMVERBATIMstaticdoubleflipbalbits(void*vv){inti,nx,ny,flip,ii,next;double*x,*y;nx=vector_instance_px(vv,&x);ny=vector_arg_px(1,&y);flip=(int)*getarg(2);if(nx!=ny){hoc_execerror("Scratchvectormustbesamesize",0);}for(i=0;i<nx;i++){y[i]=x[i];}next=1;for(i=0;i<flip;){ii=(int)((nx+1)*drand48());if(x[ii]==y[ii]&&y[ii]==next){next=x[ii]=((x[ii]==1.)?BVBASE:1.);i++;}}returnflip;}ENDVERBATIMVERBATIMstaticdoublevpr(void*vv){inti,nx;double*x;FILE*f;nx=vector_instance_px(vv,&x);if(ifarg(1)){f=hoc_obj_file_arg(1);for(i=0;i<nx;i++){if(x[i]>BVBASE){fprintf(f,"%d",1);}else{fprintf(f,"%d",0);}}fprintf(f,"\n");}else{for(i=0;i<nx;i++){if(x[i]>BVBASE){printf("%d",1);}else{printf("%d",0);}}printf("\n");}return1.;}ENDVERBATIMVERBATIMstaticdoublethresh(void*vv){inti,nx,ny,cnt;double*x,*y,th;nx=vector_instance_px(vv,&x);cnt=0;if(hoc_is_object_arg(1)){ny=vector_arg_px(1,&y);th=0;if(nx!=ny){hoc_execerror("Vectorsizesdon'tmatchinthresh.",0);}for(i=0;i<nx;i++){if(x[i]>=y[i]){x[i]=1.;cnt++;}else{x[i]=BVBASE;}}}else{th=*getarg(1);for(i=0;i<nx;i++){if(x[i]>=th){x[i]=1.;cnt++;}else{x[i]=BVBASE;}}}returncnt;}ENDVERBATIMVERBATIMstaticdoubletriplet(void*vv){inti,nx;double*x,*y,a,b;nx=vector_instance_px(vv,&x);a=*getarg(1);b=*getarg(2);for(i=0;i<nx;i+=3)if(x[i]==a&&x[i+1]==b)break;if(i<nx)return(double)i;elsereturn-1.;}ENDVERBATIMVERBATIMstaticdoubleonoff(void*vv){inti,j,n,nv,non,nt,nd,nr,num;double*st,*vol,*obon,*thr,*dur,*refr;n=vector_instance_px(vv,&st);nv=vector_arg_px(1,&vol);non=vector_arg_px(2,&obon);nt=vector_arg_px(3,&thr);nd=vector_arg_px(4,&dur);nr=vector_arg_px(5,&refr);if(n!=nv||n!=non||n!=nt||n!=nd||n!=nr){hoc_execerror("v.onoff:vectorsnotallsamesize",0);}for(i=0,num=0;i<n;i++){obon[i]--;if(obon[i]>0.){st[i]=1.;continue;}if(vol[i]>=thr[i]&&obon[i]<=-refr[i]){st[i]=1.;obon[i]=dur[i];num++;}else{st[i]=BVBASE;}}returnnum;}ENDVERBATIMVERBATIMstaticdoublebpeval(void*vv){inti,n,no,nd,flag=0;doubleadd,div;double*vo,*outp,*del;n=vector_instance_px(vv,&vo);no=vector_arg_px(1,&outp);nd=vector_arg_px(2,&del);if(ifarg(3)&&ifarg(4)){add=*getarg(3);div=*getarg(4);flag=1;}if(n!=no||n!=nd)hoc_execerror("v.bpeval:vectorsnotallsamesize",0);if(flag){for(i=0;i<n;i++)vo[i]=((outp[i]+add)/div)*(1.-1.*((outp[i]+add)/div))*del[i];}else{for(i=0;i<n;i++)vo[i]=outp[i]*(1.-1.*outp[i])*del[i];}}ENDVERBATIMVERBATIMstaticdoublesedit(void*vv){inti,n,ni,f=0;double*x,*ind,th,val;Symbol*s;char*op;op=gargstr(1);n=vector_instance_px(vv,&x);sprintf(op,"helloworld");return(double)n;}ENDVERBATIMVERBATIMstaticdoublew(void*vv){inti,n,ni,f=0;double*x,*ind,th,val;Symbol*s;char*op;if(!ifarg(1)){printf("v1.w('op',thresh[,val,v2])\n");printf("a.wherethatsetselementsinv1toval(default0),ifv2=>onlylookattheseelements\n");printf("'op'=='functionname'isa.applytargetedbyv2calledasfunc(x[i],thresh,val)\n");return-1.;}op=gargstr(1);n=vector_instance_px(vv,&x);th=*getarg(2);if(ifarg(3)){val=*getarg(3);}else{val=0.0;}if(ifarg(4)){ni=vector_arg_px(4,&ind);f=1;}if(!strcmp(op,"==")){if(f==1){for(i=0;i<ni;i++){if(x[(int)ind[i]]==th){x[(int)ind[i]]=val;}}}else{for(i=0;i<n;i++){if(x[i]==th){x[i]=val;}}}}elseif(!strcmp(op,"!=")){if(f==1){for(i=0;i<ni;i++){if(x[(int)ind[i]]!=th){x[(int)ind[i]]=val;}}}else{for(i=0;i<n;i++){if(x[i]!=th){x[i]=val;}}}}elseif(!strcmp(op,">")){if(f==1){for(i=0;i<ni;i++){if(x[(int)ind[i]]>th){x[(int)ind[i]]=val;}}}else{for(i=0;i<n;i++){if(x[i]>th){x[i]=val;}}}}elseif(!strcmp(op,"<")){if(f==1){for(i=0;i<ni;i++){if(x[(int)ind[i]]<th){x[(int)ind[i]]=val;}}}else{for(i=0;i<n;i++){if(x[i]<th){x[i]=val;}}}}elseif(!strcmp(op,">=")){if(f==1){for(i=0;i<ni;i++){if(x[(int)ind[i]]>=th){x[(int)ind[i]]=val;}}}else{for(i=0;i<n;i++){if(x[i]>=th){x[i]=val;}}}}elseif(!strcmp(op,"<=")){if(f==1){for(i=0;i<ni;i++){if(x[(int)ind[i]]<=th){x[(int)ind[i]]=val;}}}else{for(i=0;i<n;i++){if(x[i]<=th){x[i]=val;}}}}elseif((s=hoc_lookup(op))){if(f==1){for(i=0;i<ni;i++){hoc_pushx(x[(int)ind[i]]);hoc_pushx(th);hoc_pushx(val);x[(int)ind[i]]=hoc_call_func(s,3);}}else{for(i=0;i<n;i++){hoc_pushx(x[i]);hoc_pushx(th);hoc_pushx(val);x[i]=hoc_call_func(s,3);}}}return(double)i;}ENDVERBATIMVERBATIMstaticdoublexing(void*vv){inti,j,nsrc,ndest,ntvec,f,maxsz;double*src,*dest,*tvec,th;ndest=vector_instance_px(vv,&dest);nsrc=vector_arg_px(1,&src);ntvec=vector_arg_px(2,&tvec);th=*getarg(3);maxsz=vector_buffer_size(vv);vector_resize(vv,maxsz);if(nsrc!=ntvec)hoc_execerror("v.xing:vectorsnotallsamesize",0);for(i=0,f=0,j=0;i<nsrc;i++){if(src[i]>th){if(f==0){if(j>=maxsz){printf("(%d)::",maxsz);hoc_execerror("Destvectoosmallinxing",0);}if(i>0){dest[j++]=tvec[i-1]+(tvec[i]-tvec[i-1])*(th-src[i-1])/(src[i]-src[i-1]);}f=1;}}else{if(f==1){f=0;}}}vector_resize(vv,j);return(double)i;}ENDVERBATIMVERBATIMstaticdoublexzero(void*vv){inti,n,nv,up;double*x,*vc,th,cnt=0.;n=vector_instance_px(vv,&x);nv=vector_arg_px(1,&vc);if(ifarg(2)){th=*getarg(2);}else{th=0.0;}if(vc[0]<th)up=0;elseup=1;if(nv!=n)hoc_execerror("Vectorsizedoesn'tmatch.",0);for(i=0;i<nv;i++){x[i]=0.;if(up){if(vc[i]<th){x[i]=-1;up=0;cnt++;}}elseif(vc[i]>th){up=x[i]=1;cnt++;}}returncnt;}ENDVERBATIMVERBATIMstaticdoublesw(void*vv){inti,n;double*x,fr,to;n=vector_instance_px(vv,&x);fr=*getarg(1);to=*getarg(2);for(i=0;i<n;i++){if(x[i]==fr){x[i]=to;}}returnn;}ENDVERBATIMVERBATIMstaticdoubleb2v(void*vv){inti,n,num;double*x;bvec*to;Object*ob;n=vector_instance_px(vv,&x);ob=*(hoc_objgetarg(1));to=(bvec*)ob->u.this_pointer;if(to->size!=n){hoc_execerror("Vectorandbytevecsizesdon'tmatch.",0);}for(i=0;i<n;i++)x[i]=(double)to->x[i];returnn;}ENDVERBATIMVERBATIMstaticdoublev2d(void*vv){inti,n,num;double*x,*to;n=vector_instance_px(vv,&x);to=hoc_pgetarg(1);if(ifarg(2)){num=*getarg(2);}else{num=-1;}if(num>-1&&num!=n){hoc_execerror("Vectorsizedoesn'tmatch.",0);}for(i=0;i<n;i++){to[i]=x[i];}returnn;}ENDVERBATIMVERBATIMstaticdoubled2v(void*vv){inti,n,num;double*x,*fr;n=vector_instance_px(vv,&x);fr=hoc_pgetarg(1);if(ifarg(2)){num=*getarg(2);}else{num=-1;}if(num>-1&&num!=n){hoc_execerror("Vectorsizedoesn'tmatch.",0);}for(i=0;i<n;i++){x[i]=fr[i];}returnn;}ENDVERBATIMVERBATIMstaticdoublelcat(void*vv){inti,j,k,n,lc,cap,maxsz;Object*ob1,*ob2;double*x,*fr;void*vw;n=vector_instance_px(vv,&x);vector_resize(vv,maxsz=vector_buffer_size(vv));ob1=*hoc_objgetarg(1);lc=ivoc_list_count(ob1);for(i=0,j=0;i<lc&&j<maxsz;i++){cap=list_vector_px2(ob1,i,&fr,&vw);for(k=0;k<cap&&j<maxsz;k++,j++)x[j]=fr[k];}if(i<lc||k<cap)printf("vecstlcatWARN:notallvecscopied\n");vector_resize(vv,j);return(double)j;}ENDVERBATIMVERBATIMstaticintlist_vector_px(Object*ob,inti,double**px){Object*obv;intsz;obv=ivoc_list_item(ob,i);sz=vector_capacity(obv->u.this_pointer);*px=vector_vec(obv->u.this_pointer);returnsz;}staticintlist_vector_px2(Object*ob,inti,double**px,void**vv){Object*obv;intsz;obv=ivoc_list_item(ob,i);sz=vector_capacity(obv->u.this_pointer);*px=vector_vec(obv->u.this_pointer);*vv=(void*)obv->u.this_pointer;returnsz;}staticintlist_vector_resize(Object*ob,inti,intsz){Object*obv;intmaxsz;obv=ivoc_list_item(ob,i);maxsz=vector_buffer_size(obv->u.this_pointer);if(sz>maxsz){printf("max:%drequest:%d",maxsz,sz);hoc_execerror("Can'tgrowvectorinlist_vector_resize",0);return-1;}vector_resize(obv->u.this_pointer,sz);returnsz;}ENDVERBATIMVERBATIMstaticdoubleismono1(double*x,doublen,intflag){inti;doublelast;last=x[0];if(flag==1){for(i=1;i<n&&x[i]>=last;i++)last=x[i];}elseif(flag==-1){for(i=1;i<n&&x[i]<=last;i++)last=x[i];}elseif(flag==0){for(i=1;i<n&&x[i]==last;i++);}if(i==n)return1.;elsereturn0.;}staticdoubleismono(void*vv){inti,n,flag;double*x,last;n=vector_instance_px(vv,&x);if(ifarg(1)){flag=(int)*getarg(1);}else{flag=1;}returnismono1(x,n,flag);}ENDVERBATIMVERBATIMstaticdoublecount(void*vv){inti,n,cnt=0;double*x,num;n=vector_instance_px(vv,&x);num=*getarg(1);for(i=0;i<n;i++)if(x[i]==num)cnt++;returncnt;}ENDVERBATIMFUNCTIONfac(n){VERBATIM{staticintntop=4;staticdoublea[101]={1.,1.,2.,6.,24.};staticdoublecof[6]={76.18009173,-86.50532033,24.01409822,-1.231739516,0.120858003e-2,-0.536382e-5};intj,n;n=(int)_ln;if(n<0){hoc_execerror("Nonegativenumbers",0);}if(n>100){doublex,tmp,ser;x=_ln;tmp=x+5.5;tmp-=(x+0.5)*log(tmp);ser=1.0;for(j=0;j<=5;j++){x+=1.0;ser+=cof[j]/x;}returnexp(-tmp+log(2.50662827465*ser));}else{while(ntop<n){j=ntop++;a[ntop]=a[j]*ntop;}returna[n];}}ENDVERBATIM}FUNCTIONlogfac(n){VERBATIM{staticintntop=4;staticdoublea[101]={1.,1.,2.,6.,24.};staticdoublecof[6]={76.18009173,-86.50532033,24.01409822,-1.231739516,0.120858003e-2,-0.536382e-5};intj,n;n=(int)_ln;if(n<0){hoc_execerror("Nonegativenumbers",0);}if(n>100){doublex,tmp,ser;x=_ln;tmp=x+5.5;tmp-=(x+0.5)*log(tmp);ser=1.0;for(j=0;j<=5;j++){x+=1.0;ser+=cof[j]/x;}return(-tmp+log(2.50662827465*ser));}else{while(ntop<n){j=ntop++;a[ntop]=a[j]*ntop;}returnlog(a[n]);}}ENDVERBATIM}PROCEDUREExpo(x){TABLERESFROM-20TO0WITH5000RES=exp(x)}FUNCTIONAAA(x){Expo(x)AAA=RES}VERBATIMstaticdoublesmgs(void*vv){inti,j,nx,xv,nsum,points,maxsz;double*x,*sum;doublelow,high,step,var,svar,scale,arg;nsum=vector_instance_px(vv,&sum);nx=vector_arg_px(1,&x);low=*getarg(2);high=*getarg(3);step=*getarg(4);var=*getarg(5);points=(int)((high-low)/step+hoc_epsilon);if(nsum!=points){maxsz=vector_buffer_size(vv);if(points<=maxsz){vector_resize(vv,nsum);nsum=points;}else{printf("%d>%d::",points,maxsz);hoc_execerror("Vectormaxcapacitytoosmallinsmgs",0);}}svar=-2.*var*var/step/step;scale=1./sqrt(2.*M_PI)/var;for(j=0;j<points;j++)sum[j]=0.;for(i=0;i<nx;i++){xv=(int)((x[i]-low)/step+0.5);for(j=xv;j<points&&(arg=(j-xv)*(j-xv)/svar)>-20;j++){Expo(arg);sum[j]+=RES;}for(j=xv-1;j>=0&&(arg=(j-xv)*(j-xv)/svar)>-20;j--){Expo(arg);sum[j]+=RES;}}for(j=0;j<points;j++)sum[j]*=scale;returnsvar;}ENDVERBATIMPROCEDUREinstall_vecst(){VECST_INSTALLED=1VERBATIMinstall_vector_method("slope",slope);install_vector_method("vslope",vslope);install_vector_method("stats",stats);install_vector_method("vstats",vstats);install_vector_method("indset",indset);install_vector_method("randwd",randwd);install_vector_method("hamming",hamming);install_vector_method("flipbits",flipbits);install_vector_method("flipbalbits",flipbalbits);install_vector_method("vpr",vpr);install_vector_method("thresh",thresh);install_vector_method("triplet",triplet);install_vector_method("onoff",onoff);install_vector_method("bpeval",bpeval);install_vector_method("w",w);install_vector_method("sedit",sedit);install_vector_method("xing",xing);install_vector_method("cvlv",cvlv);install_vector_method("intrp",intrp);install_vector_method("xzero",xzero);install_vector_method("sw",sw);install_vector_method("ismono",ismono);install_vector_method("count",count);install_vector_method("fewind",fewind);install_vector_method("findx",findx);install_vector_method("sindx",sindx);install_vector_method("sindv",sindv);install_vector_method("nind",nind);install_vector_method("keyind",keyind);install_vector_method("slct",slct);install_vector_method("slor",slor);install_vector_method("insct",insct);install_vector_method("cull",cull);install_vector_method("redundout",redundout);install_vector_method("d2v",d2v);install_vector_method("v2d",v2d);install_vector_method("b2v",b2v);install_vector_method("iwr",iwr);install_vector_method("ird",ird);install_vector_method("smgs",smgs);install_vector_method("info",info);install_vector_method("lcat",lcat);ENDVERBATIM}PROCEDUREvseed(seed){VERBATIMsrand48((unsigned)_lseed);set_seed(_lseed);ENDVERBATIM}FUNCTIONisojt(){VERBATIMObject*ob1,*ob2;ob1=*hoc_objgetarg(1);ob2=*hoc_objgetarg(2);if(!ob1)if(!ob2)return1;elsereturn0;if(!ob2||ob1->template!=ob2->template){return0;}return1;ENDVERBATIM}FUNCTIONeqojt(){VERBATIMObject*ob1,*ob2;ob1=*hoc_objgetarg(1);ob2=*hoc_objgetarg(2);if(ob1&&ob2&&ob1==ob2){return1;}return0;ENDVERBATIM}