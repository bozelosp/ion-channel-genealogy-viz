NEURON{ARTIFICIAL_CELLBNETRANGEtstepRANGExloc,yloc,zlocGLOBALverbose,installedPOINTERsop}PARAMETER{tstep=0verbose=0sop=0}ASSIGNED{installed}CONSTRUCTOR{VERBATIMboonet*pnet;intsz;if((sz=(int)*getarg(1))<1){printf("BNETerr0:musthaveanetworkwithpositive#ofnodes!\n");hxe();}_p_sop=(void*)makeboonet(sz);pnet=BP;pnet->id=ifarg(2)?(int)*getarg(2):0;ENDVERBATIM}FUNCTIONsetrule(){VERBATIMdouble*psrc,weight,*psrcstate;inttargid,i,nsrc;if(!ifarg(4)){printf("BNET.setrule(vsource,targid,weight,vsourcestates)-setsarule.\n");printf("vsourcehasnodeIDsofsources,targidisIDoftarget,weightis(-1,1)forinhib/activating\n");printf("vsourcestatehasstatesthesourcemustbeinforthegivenruletobeturnedon.\n");return0.0;}if((nsrc=vector_arg_px(1,&psrc))<1){printf("BNET.setruleWARN0:emptysourceVector!\n");return0.0;}targid=(int)*getarg(2);if(targid<0||targid>=BP->numnodes){printf("BNET.setruleERR0:invalidtargetid:%d\n",targid);return0.0;}weight=(int)*getarg(3);if(nsrc!=vector_arg_px(4,&psrcstate)){printf("BNET.setruleERR1:vsource,vsourcestatemusthavesamesize!\n");return0.0;}for(i=0;i<nsrc;i++){if(psrc[i]<0||psrc[i]>=BP->numnodes){printf("BNET.setruleERR2:invalidsourcenodeid%d.netsize=%d\n",(int)psrc[i],BP->numnodes);return0.0;}if(verbose>1)printf("addingrulefrom%d->%d:w=%g\n",(int)psrc[i],targid,weight);}addrule(BP,psrc,targid,weight,psrcstate,nsrc);return1.0;ENDVERBATIM}PROCEDUREclearrules(){VERBATIMBP->nrules=0;ENDVERBATIM}PROCEDUREpr(){VERBATIMinti,j,k;bnode*pnodes=BP->pnodes;brule*prule;charsrcstr[4096],stmp[4096];printf("net:numnodes=%d,numrules=%d\n",BP->numnodes,BP->nrules);for(i=0;i<BP->numnodes;i++){if(pnodes[i].name){printf("%s:state=%d,count=%d\n",pnodes[i].name,pnodes[i].state,pnodes[i].count);}else{printf("%d:state=%d,count=%d\n",i,pnodes[i].state,pnodes[i].count);}}for(i=0;i<BP->nrules;i++){prule=&BP->prules[i];srcstr[0]=0;for(j=0;j<prule->nsrc;j++){if(prule->psrc[j]->name){sprintf(stmp,"%s%s%s",j>0?"AND":"",prule->psrcstate[j]?"":"!",prule->psrc[j]->name);}else{sprintf(stmp,"%s%s%s",j>0?"AND":"",prule->psrcstate[j]?"":"!",prule->psrc[j]->id);}strcat(srcstr,stmp);}if(prule->ptarg->name){printf("%s->%s,w=%d\n",srcstr,prule->ptarg->name,prule->weight);}else{printf("%s->%d,w=%d]\n",srcstr,prule->ptarg->id,prule->weight);}}ENDVERBATIM}FUNCTIONgraphviz(){VERBATIMinti,j,k,LR,fsz,w,h;bnode*pnodes=BP->pnodes;brule*prule;char*ncolor,*fcolor,*arrowtype,*lstyle,*shape;charbuf[4096],*dotname,*fname,*ext,fontsize[128];doublepenw;FILE*fp=0x0;dotname=ifarg(1)?gargstr(1):0x0;fname=ifarg(2)?gargstr(2):0x0;ext=ifarg(3)?gargstr(3):"gif";LR=ifarg(4)?(int)*getarg(4):1;w=ifarg(5)?(int)*getarg(5):-1;h=ifarg(6)?(int)*getarg(6):-1;fsz=ifarg(7)?(int)*getarg(7):-1;if(fsz==-1)sprintf(fontsize,"%s","");elsesprintf(fontsize,"fontsize=%d,",fsz);if(fname)if(!(fp=fopen(dotname,"w"))){printf("BNET.graphvizERR0:couldnotopen%s\n",fname);return0.0;}sprintf(buf,"%s","digraphG{\n");if(fp)fprintf(fp,"%s",buf);elsefprintf(stdout,"%s",buf);if(LR){sprintf(buf,"%s","\trankdir=LR;\n");if(fp)fprintf(fp,"%s",buf);elsefprintf(stdout,"%s",buf);}if(w>0&&h>0){sprintf(buf,"size=\"%d,%d\"\n",w,h);if(fp)fprintf(fp,"%s",buf);elsefprintf(stdout,"%s",buf);}for(i=0;i<BP->numnodes;i++){ncolor=BP->pnodes[i].knockout?"white":BP->pnodes[i].state>0?"black":"gray";fcolor=BP->pnodes[i].knockout?"black":"white";shape=pnodes[i].sthresh>0?"invtriangle":"doublecircle";if(BP->pnodes[i].name){sprintf(buf,"\t%s[fontcolor=%s,%sstyle=filled,shape=%s,fillcolor=%s,color=%s]\n",BP->pnodes[i].name,fcolor,fontsize,shape,ncolor,ncolor);}else{sprintf(buf,"\t%d[fontcolor=%s,%sstyle=filled,shape=%s,fillcolor=%s,color=%s]\n",i,fcolor,fontsize,shape,ncolor,ncolor);}if(fp)fprintf(fp,"%s",buf);elsefprintf(stdout,"%s",buf);}for(i=0;i<BP->nrules;i++){prule=&BP->prules[i];for(j=0;j<prule->nsrc;j++){penw=prule->psrcstate[j]==prule->psrc[j]->state?6.0:1.0;arrowtype=prule->weight<0?"tee":"open";lstyle=prule->psrcstate[j]==0?",style=dashed":"";if(prule->psrc[j]->name){if(prule->ptarg->name){sprintf(buf,"\t%s->%s[arrowhead=%s,penwidth=%g,color=%s%s]\n",prule->psrc[j]->name,prule->ptarg->name,arrowtype,penw,prule->weight>0?"red":"blue",lstyle);}else{sprintf(buf,"\t%s->%d[arrowhead=%s,penwidth=%g,color=%s%s]\n",prule->psrc[j]->name,prule->ptarg->id,arrowtype,penw,prule->weight>0?"red":"blue",lstyle);}}elseif(prule->ptarg->name){sprintf(buf,"\t%d->%s[arrowhead=%s,penwidth=%g,color=%s%s]\n",prule->psrc[j]->id,prule->ptarg->name,arrowtype,penw,prule->weight>0?"red":"blue",lstyle);}else{sprintf(buf,"\t%d->%d[arrowhead=%s,penwidth=%g,color=%s%s]\n",prule->psrc[j]->id,prule->ptarg->id,arrowtype,penw,prule->weight>0?"red":"blue",lstyle);}if(fp)fprintf(fp,"%s",buf);elsefprintf(stdout,"%s",buf);}}sprintf(buf,"%s","}\n");if(fp)fprintf(fp,"%s",buf);elsefprintf(stdout,"%s",buf);if(fp)fclose(fp);if(fname){sprintf(buf,"dot%s-T%s>%s",dotname,ext,fname);if(0!=system(buf)){printf("BNET.graphvizERR1:couldn'trun%s\n",buf);return0.0;}}return1.0;ENDVERBATIM}DESTRUCTOR{VERBATIMfreeboonet(BP);ENDVERBATIM}PROCEDUREstart(){tstep=0VERBATIMstartboonet(BP);ENDVERBATIM}INITIAL{start()}PROCEDUREstrvalid(){VERBATIMchar*pname;staticchar*pnames[6]={"state","count","knockout","start","sthresh","scount"};inti;pname=gargstr(1);for(i=0;i<6;i++){if(!strcmp(pname,pnames[i]))returni;}return-1;ENDVERBATIM}PROCEDUREgetscount(){VERBATIMdouble*ps;inti;void*vs;if(!ifarg(1)){printf("BNET.getscount(vec)-returnsscountofeachnodeinvec\n");return;}vs=vector_arg(1);ps=vector_newsize(vs,BP->numnodes);for(i=0;i<BP->numnodes;i++)ps[i]=(double)BP->pnodes[i].scount;ENDVERBATIM}FUNCTIONsetscount(){VERBATIMdouble*ps;inti,sz;if(!ifarg(1)){printf("BNET.setscount(vec)-setsscountofeachnodeinvec\n");return0.0;}if((sz=vector_arg_px(1,&ps))!=BP->numnodes){printf("BNET.setscountERR0:vec.size(%d)!=BNET.numnodes(%d)\n",sz,BP->numnodes);return0.0;}for(i=0;i<BP->numnodes;i++)BP->pnodes[i].scount=(int)ps[i];return1.0;ENDVERBATIM}PROCEDUREgetsthresh(){VERBATIMdouble*ps;inti;void*vs;if(!ifarg(1)){printf("BNET.getsthresh(vec)-returnssthreshofeachnodeinvec\n");return;}vs=vector_arg(1);ps=vector_newsize(vs,BP->numnodes);for(i=0;i<BP->numnodes;i++)ps[i]=(double)BP->pnodes[i].sthresh;ENDVERBATIM}FUNCTIONsetsthresh(){VERBATIMdouble*ps;inti,sz;if(!ifarg(1)){printf("BNET.setsthresh(vec)-setssthreshofeachnodeinvec\n");return0.0;}if((sz=vector_arg_px(1,&ps))!=BP->numnodes){printf("BNET.setsthreshERR0:vec.size(%d)!=BNET.numnodes(%d)\n",sz,BP->numnodes);return0.0;}for(i=0;i<BP->numnodes;i++)BP->pnodes[i].sthresh=(int)ps[i];return1.0;ENDVERBATIM}PROCEDUREgetcount(){VERBATIMdouble*ps;inti;void*vs;if(!ifarg(1)){printf("BNET.getcount(vec)-returnscountofeachnodeinvec\n");return;}vs=vector_arg(1);ps=vector_newsize(vs,BP->numnodes);for(i=0;i<BP->numnodes;i++)ps[i]=(double)BP->pnodes[i].count;ENDVERBATIM}FUNCTIONsetcount(){VERBATIMdouble*ps;inti,sz;if(!ifarg(1)){printf("BNET.setcount(vec)-setscountofeachnodeinvec\n");return0.0;}if((sz=vector_arg_px(1,&ps))!=BP->numnodes){printf("BNET.setcountERR0:vec.size(%d)!=BNET.numnodes(%d)\n",sz,BP->numnodes);return0.0;}for(i=0;i<BP->numnodes;i++)BP->pnodes[i].count=(int)ps[i];return1.0;ENDVERBATIM}PROCEDUREgetstate(){VERBATIMdouble*ps;inti;void*vs;if(!ifarg(1)){printf("BNET.getstate(vec)-returnsstateofeachnodeinvec\n");return;}vs=vector_arg(1);ps=vector_newsize(vs,BP->numnodes);for(i=0;i<BP->numnodes;i++)ps[i]=(double)BP->pnodes[i].state;ENDVERBATIM}FUNCTIONsetstate(){VERBATIMdouble*ps;inti,sz;if(!ifarg(1)){printf("BNET.setstate(vec)-setsstateofeachnodeinvec\n");return0.0;}if((sz=vector_arg_px(1,&ps))!=BP->numnodes){printf("BNET.setstateERR0:vec.size(%d)!=BNET.numnodes(%d)\n",sz,BP->numnodes);return0.0;}for(i=0;i<BP->numnodes;i++)BP->pnodes[i].state=(int)ps[i];return1.0;ENDVERBATIM}PROCEDUREgetstart(){VERBATIMdouble*ps;inti;void*vs;if(!ifarg(1)){printf("BNET.getstart(vec)-returnsstartstateofeachnodeinvec\n");return;}vs=vector_arg(1);ps=vector_newsize(vs,BP->numnodes);for(i=0;i<BP->numnodes;i++)ps[i]=(double)BP->pnodes[i].start;ENDVERBATIM}FUNCTIONsetstart(){VERBATIMdouble*ps;inti,sz;if(!ifarg(1)){printf("BNET.setstart(vec)-setsstartstateofeachnodeinvec\n");return0.0;}if((sz=vector_arg_px(1,&ps))!=BP->numnodes){printf("BNET.setstartERR0:vec.size(%d)!=BNET.numnodes(%d)\n",sz,BP->numnodes);return0.0;}for(i=0;i<BP->numnodes;i++)BP->pnodes[i].start=(int)ps[i];return1.0;ENDVERBATIM}FUNCTIONsetknockout(){VERBATIMdouble*pk;inti,sz;if(!ifarg(1)){printf("BNET.knockout(vec)-setsknockoutflagofeachnodeinvec\n");return0.0;}if((sz=vector_arg_px(1,&pk))!=BP->numnodes){printf("BNET.knockoutERR0:vec.size(%d)!=BNET.numnodes(%d)\n",sz,BP->numnodes);return0.0;}for(i=0;i<BP->numnodes;i++)BP->pnodes[i].knockout=(int)pk[i];return1.0;ENDVERBATIM}PROCEDUREgetknockout(){VERBATIMdouble*pk;inti;void*vk;if(!ifarg(1)){printf("BNET.getknockout(vec)-returnsknockoutflagofeachnodeinvec\n");return;}vk=vector_arg(1);pk=vector_newsize(vk,BP->numnodes);for(i=0;i<BP->numnodes;i++)pk[i]=(double)BP->pnodes[i].knockout;ENDVERBATIM}FUNCTIONsetnname(){VERBATIMintid,sz;char*name;id=(int)*getarg(1);if(id<0||id>=BP->numnodes){printf("BNET.setnnameERR0:invalidnodeindex%d\n",id);return0.0;}name=gargstr(2);if(!(sz=strlen(name))){printf("BNET.setnnameERR1:emptystring\n");return0.0;}if(BP->pnodes[id].name)free(BP->pnodes[id].name);if(!(BP->pnodes[id].name=(char*)malloc(sizeof(char)*(sz+1)))){printf("BNET.setnnameERR2:couldn'tallocmemfor%s\n",name);return0.0;}strcpy(BP->pnodes[id].name,name);return1.0;ENDVERBATIM}FUNCTIONgetnname(){VERBATIMinti,id,sz;char**pname,string[BUFSIZ];char**hoc_pgargstr();id=(int)*getarg(1);if(id<0||id>=BP->numnodes){printf("BNET.getnnameERR0:invalidnodeindex%d\n",id);return0.0;}if(!BP->pnodes[id].name||!(sz=strlen(BP->pnodes[id].name))){printf("BNET.getnnameERR1:node%dhasnoname\n",id);return0.0;}for(i=0;i<sz&&i<BUFSIZ;i++)string[i]=BP->pnodes[id].name[i];if(i<BUFSIZ)string[i]=0;printf("Anameis%s,%s\n",BP->pnodes[id].name,string);pname=hoc_pgargstr(2);printf("Bnameis%s,%s\n",BP->pnodes[id].name,string);hoc_assign_str(pname,string);return1.0;ENDVERBATIM}FUNCTIONadvancebn(){VERBATIMadvanceboonet(BP);tstep=tstep+1;returntstep;ENDVERBATIM}FUNCTIONadvancebnfor(){VERBATIMinti,n;n=(int)*getarg(1);for(i=0;i<n;i++)advancebn();returntstep;ENDVERBATIM}FUNCTIONnumnodes(){VERBATIMreturnBP->numnodes;ENDVERBATIM}FUNCTIONnumrules(){VERBATIMreturnBP->nrules;ENDVERBATIM}FUNCTIONid(){VERBATIMreturn(double)BP->id;ENDVERBATIM}