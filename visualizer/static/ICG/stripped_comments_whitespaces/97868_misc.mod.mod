INDEPENDENT{tFROM0TO1WITH1(ms)}NEURON{SUFFIXnothing}VERBATIM#include<unistd.h>#include<errno.h>#include<signal.h>#include<sys/types.h>#include<time.h>#include<stdio.h>#include<limits.h>externinthoc_is_tempobj(intnarg);ENDVERBATIMFUNCTIONfile_exist(){VERBATIMchar*gargstr(),*filename;filename=gargstr(1);if(*filename&&!access(filename,F_OK)){_lfile_exist=1;}else{errno=0;_lfile_exist=0;}ENDVERBATIM}FUNCTIONistmpobj(){VERBATIM_listmpobj=hoc_is_tempobj_arg(1);ENDVERBATIM}PROCEDUREsassign(){VERBATIMFILE*pipein;charstring[BUFSIZ],**strname,*syscall;char**hoc_pgargstr();strname=hoc_pgargstr(1);syscall=gargstr(2);if(!(pipein=popen(syscall,"r"))){fprintf(stderr,"Systemcallfailed\n");return;}if(fgets(string,BUFSIZ,pipein)==NULL){fprintf(stderr,"Systemcalldidnotreturnastring\n");pclose(pipein);return;}hoc_assign_str(strname,string);pclose(pipein);errno=0;ENDVERBATIM}PROCEDUREdassign(){VERBATIMFILE*pipein,*outfile;char*strname,*syscall;doublenum;strname=gargstr(1);syscall=gargstr(2);if(!(outfile=fopen("dassign","w"))){fprintf(stderr,"Can'topenoutputfiledassign\n");return;}if(!(pipein=popen(syscall,"r"))){fprintf(stderr,"Systemcallfailed\n");fclose(outfile);return;}if(fscanf(pipein,"%lf",&num)!=1){fprintf(stderr,"Systemcalldidnotreturnanumber\n");fclose(outfile);pclose(pipein);return;}fprintf(outfile,"%s=%g\n",strname,num);fprintf(outfile,"system(\"rmdassign\")\n");fclose(outfile);pclose(pipein);errno=0;ENDVERBATIM}PROCEDUREnokill(){VERBATIMsignal(SIGHUP,SIG_IGN);ENDVERBATIM}FUNCTIONprtime(){VERBATIM_lprtime=clock();ENDVERBATIM}FUNCTIONnow(){VERBATIM_lnow=time((time_t*)0);_lnow-=(12784)*24*60*60;ENDVERBATIM}PROCEDUREsleepfor(sec){VERBATIMstructtimespects;ts.tv_sec=(time_t)_lsec;ts.tv_nsec=(long)0;nanosleep(&ts,(structtimespec*)0);ENDVERBATIM}PROCEDUREspitchar(c){VERBATIM{printf("%c",(int)_lc);}ENDVERBATIM}VERBATIMstaticchar*pmlc;ENDVERBATIMPROCEDUREmymalloc(sz){VERBATIM{size_tx,y;x=(size_t)_lsz;pmlc=(char*)malloc(x);printf("Did%ld:%x\n",x,pmlc);y=(unsignedint)_lsz-1;pmlc[y]=(char)97;printf("WRITE/READ'a':");printf("%c\n",pmlc[y]);if(ifarg(2))free(pmlc);elseprintf("Useunmalloc()tofreememory\n");}ENDVERBATIM}PROCEDUREunmalloc(){VERBATIMfree(pmlc);ENDVERBATIM}FUNCTIONhocgetc(){VERBATIM{FILE*f,*hoc_obj_file_arg();f=hoc_obj_file_arg(1);_lhocgetc=(double)getc(f);}ENDVERBATIM}PROCEDUREpwd(){VERBATIM{charcwd[1000],cmd[1200];getcwd(cwd,1000);sprintf(cmd,"execute1(\"strdefcwd\")\n");hoc_oc(cmd);sprintf(cmd,"execute1(\"cwd=\\\"%s\\\"\")\n",cwd);hoc_oc(cmd);}ENDVERBATIM}