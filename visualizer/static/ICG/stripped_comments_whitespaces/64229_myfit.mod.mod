NEURON{SUFFIXnothingGLOBALFIT_INSTALLED}PARAMETER{FIT_INSTALLED=0}ASSIGNED{RES}VERBATIM#include<stdlib.h>#include<math.h>#include<limits.h>#include<sys/time.h>externdouble*hoc_pgetarg();externdoublehoc_call_func(Symbol*,intnarg);externFILE*hoc_obj_file_arg(intnarg);externObject**hoc_objgetarg();externvoidvector_resize();externintvector_instance_px();externvoid*vector_arg();externdouble*vector_vec();externdoublehoc_epsilon;externvoidset_seed();externintivoc_list_count(Object*);externObject*ivoc_list_item(Object*,int);externintlist_vector_px2();intlist_vector_px();intlist_vector_resize();typedefstructBVEC{intsize;intbufsize;short*x;Object*o;}bvec;ENDVERBATIMVERBATIMstaticdoublespkcmp(void*vv){intflag,i,j,k,nx,nm[10],nt[10],num,sum,minind;Object*ob,*ob1;double*vvm[10],*vvt[10],*x,err,diff,min;nx=vector_instance_px(vv,&x);ob=*hoc_objgetarg(1);ob1=*hoc_objgetarg(2);if(ifarg(3))flag=(int)*getarg(3);elseflag=0;num=ivoc_list_count(ob);i=ivoc_list_count(ob1);if(num>10)hoc_execerror("ERR:spkcmpcanonlyhandle10vectors",0);if(num!=i)hoc_execerror("ERR:spkcmpdifferentsizedlists",0);if(nx!=num*2)hoc_execerror("ERR:spkcmpvecshouldbe2*listlength",0);for(i=0;i<num;i++){nm[i]=list_vector_px(ob,i,&vvm[i]);nt[i]=list_vector_px(ob1,i,&vvt[i]);}for(i=0;i<num;i++){if(nm[i]<=nt[i]){for(j=0,err=0;j<nm[i];j++){for(k=0,min=1e9;k<nt[i];k++){diff=fabs(vvm[i][j]-vvt[i][k]);if(diff<min){min=diff;minind=k;}}err+=min;vvt[i][minind]=1e9;}}else{for(k=0,err=0;k<nt[i];k++){for(j=0,min=1e9;j<nm[i];j++){diff=fabs(vvm[i][j]-vvt[i][k]);if(diff<min){min=diff;minind=j;}}err+=min;vvm[i][minind]=1e9;}}x[i]=err;}for(i=0;i<num;i++)x[i+num]=(double)abs(nm[i]-nt[i]);for(i=0,err=0;i<2*num;i++)err+=x[i];returnerr;}ENDVERBATIMVERBATIMstaticdoublebursty(void*vv){inti,j,k,nx,nm[10],nt[10],num,minind;Object*ob,*ob1;double*vvm[10],*vvt[10],*x,err,diff,mininvl,invl,last,sum,cnt;nx=vector_instance_px(vv,&x);ob=*hoc_objgetarg(1);if(ifarg(2))mininvl=*getarg(2);elsemininvl=3.;num=ivoc_list_count(ob);if(num>10)hoc_execerror("ERR:spkcmpcanonlyhandle10vectors",0);if(nx!=2*num)hoc_execerror("ERR:spkcmpvecshouldbe2*listlength",0);for(i=0;i<num;i++){nm[i]=list_vector_px(ob,i,&vvm[i]);}for(i=0;i<num;i++){for(j=1,last=vvm[i][0],sum=0.,cnt=0.;j<nm[i];j++){if((invl=vvm[i][j]-last)<mininvl){sum+=invl;cnt+=1;}last=vvm[i][j];}x[2*i]=cnt;x[2*i+1]=sum/cnt;}returnx[0];}ENDVERBATIMPROCEDUREinstall_myfit(){FIT_INSTALLED=1VERBATIMinstall_vector_method("spkcmp",spkcmp);install_vector_method("bursty",bursty);ENDVERBATIM}PROCEDUREidptr(){VERBATIMdouble*fr;fr=hoc_pgetarg(1);printf("%x\n",fr);ENDVERBATIM}FUNCTIONveclistcp(){VERBATIM{intcode,i,j,ns,nd,num,n[2];Object*obs,*obd;double*vvs,*vvd;obs=*hoc_objgetarg(1);obd=*hoc_objgetarg(2);num=ivoc_list_count(obs);i=ivoc_list_count(obd);if(num!=i)hoc_execerror("veclistcpERR:differentsizedlists",0);for(i=0;i<num;i++){ns=list_vector_px(obs,i,&vvs);nd=list_vector_px(obd,i,&vvd);if(ns!=nd){printf("veclistcpERR%d%d%d\n",i,ns,nd);hoc_execerror("Vectorsmustallbesamesize:",0);}for(j=0;j<ns;j++)vvd[j]=vvs[j];}returnnum;}ENDVERBATIM}